{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Machine Learning Engineer Nanodegree Project (Starbucks Project)\n",
    "\n",
    "## Project Overview \n",
    "\n",
    "This project aims to identify consumers who will respond positively or favourably to a sales promotion offer made by starbucks. Starbucks dispenses messages to customers containing a type of offer. Offers made by Starbucks in these messages include the following: <b>buy-one-get-one (BOGO)</b>, <b>discount offers</b> and <b>informational offers</b>. Each customer receives one of these offers.\n",
    "\n",
    "BOGO offers require that a customer spends a particular amount or purchases the required amount of items to qualify. Discount offers give customers the chance to purchase certain items at lesser value. The last category which is informational, is not necessarily an offer but merely gives information about certain products. Customers and consumers alike receive these offers through a variety of channels. These channels include: web, email, mobile and social media.\n",
    "\n",
    "Generally, companies make offers or deploy ads to their customers for a number of reasons, this action is referred to as sales promotion. Some of the reasons for sales promotion include: increase sales, gain market share from competition, gain new distribution opportunities and so on. Sale promos demand a significant amount of resources and are only successful when the objectives are achieved.\n",
    "\n",
    "## Problem Statement\n",
    "\n",
    "Starbucks like any other organisation sends out promos to reward loyal customers, maximize\n",
    "profit and also gain new customers. The typical flow of an appropriate offer begins with <b>\"Offer Recieved\"</b>. The next stage is <b>\"Offer Viewed\"</b>. at this stage it is expected that the customer has viewed the offer. The third stage is <b>\"Transaction\"</b>, whereby the customer makes a transaction in accordance with the offer viewed. The last stage is <b>\"Offer Completed\"</b> in which the customer has completed the demands of the offer and made the appropriate transactions. \n",
    "\n",
    "Considering the preceding, it is discovered that some consumers do not complete the offer. In certain cases, offers are only received and not viewed while others are viewed and no transaction is conducted. There are also cases where transactions not impacted by offers are conducted. The preceding scenarios which depict incomplete offers, points to the inability to match customers with offers they are prone to completing. As such, this project sets determine if a particular customer will respond to an offer or not.\n",
    "\n",
    "For the purpose of solving the above stated problem, a classifier will be trained to determine if a\n",
    "customer will respond to a particular offer or not. The project will also identify the features that\n",
    "customers consider before responding to an offer. There (3) distinct classifiers <b>(Logistic Regression,\n",
    "Random Forest Classifier, Gradient Boosting)</b> will be trained with the data and their results\n",
    "compared with each other. The classifier or model with the highest accuracy will be chosen.\n",
    "\n",
    "## Metrics\n",
    "\n",
    "For this project, a confusion matrix will be generated detailing the True\n",
    "Positives (TP), False Positives (FP), False Negatives (FN), True Negatives (TN). The purpose\n",
    "of this is to depict the number of correct and wrong predictions made by the model. After this,\n",
    "the modelâ€™s accuracy score will be generated. Accuracy measures the ratio of correct\n",
    "predictions over the total number of instances evaluated. Formula for accuracy:\n",
    "(TP+TN)/(TP+TN+FP+FN)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing the necessary libraries for this project \n",
    "%matplotlib inline\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "#importing the models and tools to be used in this project\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "#initializing the scaler to be used\n",
    "scaler = MinMaxScaler()\n",
    "\n",
    "#initializing the models that will be used\n",
    "lr = LogisticRegression(random_state=42) \n",
    "rfc = RandomForestClassifier(random_state=42) \n",
    "gbc = GradientBoostingClassifier(random_state=42) \n",
    "\n",
    "#reading the dataset(s) for this project\n",
    "portfolio = pd.read_csv('/Users/mac/Downloads/Starbucks proposal and dataset/portfolio.csv')\n",
    "profile = pd.read_csv('/Users/mac/Downloads/Starbucks proposal and dataset/profile.csv')\n",
    "transcript = pd.read_csv('/Users/mac/Downloads/Starbucks proposal and dataset/transcript.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Data Exploration and Cleaning\n",
    "\n",
    "This section involves exploring the dataset to know distinct columns and values, checking for duplicates, handling missing data and clreating new features from existing ones\n",
    "\n",
    "## 1.1 Portfolio Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reward</th>\n",
       "      <th>channels</th>\n",
       "      <th>difficulty</th>\n",
       "      <th>duration</th>\n",
       "      <th>offer_type</th>\n",
       "      <th>id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10</td>\n",
       "      <td>['email', 'mobile', 'social']</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>bogo</td>\n",
       "      <td>ae264e3637204a6fb9bb56bc8210ddfd</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10</td>\n",
       "      <td>['web', 'email', 'mobile', 'social']</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>bogo</td>\n",
       "      <td>4d5c57ea9a6940dd891ad53e9dbe8da0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>['web', 'email', 'mobile']</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>informational</td>\n",
       "      <td>3f207df678b143eea3cee63160fa8bed</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>['web', 'email', 'mobile']</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>bogo</td>\n",
       "      <td>9b98b8c7a33c4b65b9aebfe6a799e6d9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>['web', 'email']</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>discount</td>\n",
       "      <td>0b1e1539f2cc45b7b9fa7c272da2e1d7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3</td>\n",
       "      <td>['web', 'email', 'mobile', 'social']</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>discount</td>\n",
       "      <td>2298d6c36e964ae4a3e7e9706d1fb8c2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2</td>\n",
       "      <td>['web', 'email', 'mobile', 'social']</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>discount</td>\n",
       "      <td>fafdcd668e3743c1bb461111dcafc2a4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>['email', 'mobile', 'social']</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>informational</td>\n",
       "      <td>5a8bc65990b245e5a138643cd4eb9837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>5</td>\n",
       "      <td>['web', 'email', 'mobile', 'social']</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>bogo</td>\n",
       "      <td>f19421c1d4aa40978ebb69ca19b0e20d</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2</td>\n",
       "      <td>['web', 'email', 'mobile']</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>discount</td>\n",
       "      <td>2906b810c7d4411798c6938adc9daaa5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   reward                              channels  difficulty  duration  \\\n",
       "0      10         ['email', 'mobile', 'social']          10         7   \n",
       "1      10  ['web', 'email', 'mobile', 'social']          10         5   \n",
       "2       0            ['web', 'email', 'mobile']           0         4   \n",
       "3       5            ['web', 'email', 'mobile']           5         7   \n",
       "4       5                      ['web', 'email']          20        10   \n",
       "5       3  ['web', 'email', 'mobile', 'social']           7         7   \n",
       "6       2  ['web', 'email', 'mobile', 'social']          10        10   \n",
       "7       0         ['email', 'mobile', 'social']           0         3   \n",
       "8       5  ['web', 'email', 'mobile', 'social']           5         5   \n",
       "9       2            ['web', 'email', 'mobile']          10         7   \n",
       "\n",
       "      offer_type                                id  \n",
       "0           bogo  ae264e3637204a6fb9bb56bc8210ddfd  \n",
       "1           bogo  4d5c57ea9a6940dd891ad53e9dbe8da0  \n",
       "2  informational  3f207df678b143eea3cee63160fa8bed  \n",
       "3           bogo  9b98b8c7a33c4b65b9aebfe6a799e6d9  \n",
       "4       discount  0b1e1539f2cc45b7b9fa7c272da2e1d7  \n",
       "5       discount  2298d6c36e964ae4a3e7e9706d1fb8c2  \n",
       "6       discount  fafdcd668e3743c1bb461111dcafc2a4  \n",
       "7  informational  5a8bc65990b245e5a138643cd4eb9837  \n",
       "8           bogo  f19421c1d4aa40978ebb69ca19b0e20d  \n",
       "9       discount  2906b810c7d4411798c6938adc9daaa5  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#viewing the porfolio dataset\n",
    "portfolio"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "from the dataset above, we can see that there are a 6 columns. Generally, we can see that the dataset needs cleaning. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   reward                              channels  difficulty  duration  \\\n",
      "0      10         ['email', 'mobile', 'social']          10         7   \n",
      "1      10  ['web', 'email', 'mobile', 'social']          10         5   \n",
      "2       0            ['web', 'email', 'mobile']           0         4   \n",
      "3       5            ['web', 'email', 'mobile']           5         7   \n",
      "4       5                      ['web', 'email']          20        10   \n",
      "5       3  ['web', 'email', 'mobile', 'social']           7         7   \n",
      "6       2  ['web', 'email', 'mobile', 'social']          10        10   \n",
      "7       0         ['email', 'mobile', 'social']           0         3   \n",
      "8       5  ['web', 'email', 'mobile', 'social']           5         5   \n",
      "9       2            ['web', 'email', 'mobile']          10         7   \n",
      "\n",
      "      offer_type                          offer_id  bogo  discount  \\\n",
      "0           bogo  ae264e3637204a6fb9bb56bc8210ddfd     1         0   \n",
      "1           bogo  4d5c57ea9a6940dd891ad53e9dbe8da0     1         0   \n",
      "2  informational  3f207df678b143eea3cee63160fa8bed     0         0   \n",
      "3           bogo  9b98b8c7a33c4b65b9aebfe6a799e6d9     1         0   \n",
      "4       discount  0b1e1539f2cc45b7b9fa7c272da2e1d7     0         1   \n",
      "5       discount  2298d6c36e964ae4a3e7e9706d1fb8c2     0         1   \n",
      "6       discount  fafdcd668e3743c1bb461111dcafc2a4     0         1   \n",
      "7  informational  5a8bc65990b245e5a138643cd4eb9837     0         0   \n",
      "8           bogo  f19421c1d4aa40978ebb69ca19b0e20d     1         0   \n",
      "9       discount  2906b810c7d4411798c6938adc9daaa5     0         1   \n",
      "\n",
      "   informational  web  \n",
      "0              0    0  \n",
      "1              0    1  \n",
      "2              1    1  \n",
      "3              0    1  \n",
      "4              0    1  \n",
      "5              0    1  \n",
      "6              0    1  \n",
      "7              1    0  \n",
      "8              0    1  \n",
      "9              0    1  \n",
      "   reward                              channels  difficulty  duration  \\\n",
      "0      10         ['email', 'mobile', 'social']          10         7   \n",
      "1      10  ['web', 'email', 'mobile', 'social']          10         5   \n",
      "2       0            ['web', 'email', 'mobile']           0         4   \n",
      "3       5            ['web', 'email', 'mobile']           5         7   \n",
      "4       5                      ['web', 'email']          20        10   \n",
      "5       3  ['web', 'email', 'mobile', 'social']           7         7   \n",
      "6       2  ['web', 'email', 'mobile', 'social']          10        10   \n",
      "7       0         ['email', 'mobile', 'social']           0         3   \n",
      "8       5  ['web', 'email', 'mobile', 'social']           5         5   \n",
      "9       2            ['web', 'email', 'mobile']          10         7   \n",
      "\n",
      "      offer_type                          offer_id  bogo  discount  \\\n",
      "0           bogo  ae264e3637204a6fb9bb56bc8210ddfd     1         0   \n",
      "1           bogo  4d5c57ea9a6940dd891ad53e9dbe8da0     1         0   \n",
      "2  informational  3f207df678b143eea3cee63160fa8bed     0         0   \n",
      "3           bogo  9b98b8c7a33c4b65b9aebfe6a799e6d9     1         0   \n",
      "4       discount  0b1e1539f2cc45b7b9fa7c272da2e1d7     0         1   \n",
      "5       discount  2298d6c36e964ae4a3e7e9706d1fb8c2     0         1   \n",
      "6       discount  fafdcd668e3743c1bb461111dcafc2a4     0         1   \n",
      "7  informational  5a8bc65990b245e5a138643cd4eb9837     0         0   \n",
      "8           bogo  f19421c1d4aa40978ebb69ca19b0e20d     1         0   \n",
      "9       discount  2906b810c7d4411798c6938adc9daaa5     0         1   \n",
      "\n",
      "   informational  web  email  \n",
      "0              0    0      1  \n",
      "1              0    1      1  \n",
      "2              1    1      1  \n",
      "3              0    1      1  \n",
      "4              0    1      1  \n",
      "5              0    1      1  \n",
      "6              0    1      1  \n",
      "7              1    0      1  \n",
      "8              0    1      1  \n",
      "9              0    1      1  \n",
      "   reward                              channels  difficulty  duration  \\\n",
      "0      10         ['email', 'mobile', 'social']          10         7   \n",
      "1      10  ['web', 'email', 'mobile', 'social']          10         5   \n",
      "2       0            ['web', 'email', 'mobile']           0         4   \n",
      "3       5            ['web', 'email', 'mobile']           5         7   \n",
      "4       5                      ['web', 'email']          20        10   \n",
      "5       3  ['web', 'email', 'mobile', 'social']           7         7   \n",
      "6       2  ['web', 'email', 'mobile', 'social']          10        10   \n",
      "7       0         ['email', 'mobile', 'social']           0         3   \n",
      "8       5  ['web', 'email', 'mobile', 'social']           5         5   \n",
      "9       2            ['web', 'email', 'mobile']          10         7   \n",
      "\n",
      "      offer_type                          offer_id  bogo  discount  \\\n",
      "0           bogo  ae264e3637204a6fb9bb56bc8210ddfd     1         0   \n",
      "1           bogo  4d5c57ea9a6940dd891ad53e9dbe8da0     1         0   \n",
      "2  informational  3f207df678b143eea3cee63160fa8bed     0         0   \n",
      "3           bogo  9b98b8c7a33c4b65b9aebfe6a799e6d9     1         0   \n",
      "4       discount  0b1e1539f2cc45b7b9fa7c272da2e1d7     0         1   \n",
      "5       discount  2298d6c36e964ae4a3e7e9706d1fb8c2     0         1   \n",
      "6       discount  fafdcd668e3743c1bb461111dcafc2a4     0         1   \n",
      "7  informational  5a8bc65990b245e5a138643cd4eb9837     0         0   \n",
      "8           bogo  f19421c1d4aa40978ebb69ca19b0e20d     1         0   \n",
      "9       discount  2906b810c7d4411798c6938adc9daaa5     0         1   \n",
      "\n",
      "   informational  web  email  mobile  \n",
      "0              0    0      1       1  \n",
      "1              0    1      1       1  \n",
      "2              1    1      1       1  \n",
      "3              0    1      1       1  \n",
      "4              0    1      1       0  \n",
      "5              0    1      1       1  \n",
      "6              0    1      1       1  \n",
      "7              1    0      1       1  \n",
      "8              0    1      1       1  \n",
      "9              0    1      1       1  \n",
      "   reward                              channels  difficulty  duration  \\\n",
      "0      10         ['email', 'mobile', 'social']          10         7   \n",
      "1      10  ['web', 'email', 'mobile', 'social']          10         5   \n",
      "2       0            ['web', 'email', 'mobile']           0         4   \n",
      "3       5            ['web', 'email', 'mobile']           5         7   \n",
      "4       5                      ['web', 'email']          20        10   \n",
      "5       3  ['web', 'email', 'mobile', 'social']           7         7   \n",
      "6       2  ['web', 'email', 'mobile', 'social']          10        10   \n",
      "7       0         ['email', 'mobile', 'social']           0         3   \n",
      "8       5  ['web', 'email', 'mobile', 'social']           5         5   \n",
      "9       2            ['web', 'email', 'mobile']          10         7   \n",
      "\n",
      "      offer_type                          offer_id  bogo  discount  \\\n",
      "0           bogo  ae264e3637204a6fb9bb56bc8210ddfd     1         0   \n",
      "1           bogo  4d5c57ea9a6940dd891ad53e9dbe8da0     1         0   \n",
      "2  informational  3f207df678b143eea3cee63160fa8bed     0         0   \n",
      "3           bogo  9b98b8c7a33c4b65b9aebfe6a799e6d9     1         0   \n",
      "4       discount  0b1e1539f2cc45b7b9fa7c272da2e1d7     0         1   \n",
      "5       discount  2298d6c36e964ae4a3e7e9706d1fb8c2     0         1   \n",
      "6       discount  fafdcd668e3743c1bb461111dcafc2a4     0         1   \n",
      "7  informational  5a8bc65990b245e5a138643cd4eb9837     0         0   \n",
      "8           bogo  f19421c1d4aa40978ebb69ca19b0e20d     1         0   \n",
      "9       discount  2906b810c7d4411798c6938adc9daaa5     0         1   \n",
      "\n",
      "   informational  web  email  mobile  social  \n",
      "0              0    0      1       1       1  \n",
      "1              0    1      1       1       1  \n",
      "2              1    1      1       1       0  \n",
      "3              0    1      1       1       0  \n",
      "4              0    1      1       0       0  \n",
      "5              0    1      1       1       1  \n",
      "6              0    1      1       1       1  \n",
      "7              1    0      1       1       1  \n",
      "8              0    1      1       1       1  \n",
      "9              0    1      1       1       0  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reward</th>\n",
       "      <th>channels</th>\n",
       "      <th>difficulty</th>\n",
       "      <th>duration</th>\n",
       "      <th>offer_type</th>\n",
       "      <th>offer_id</th>\n",
       "      <th>bogo</th>\n",
       "      <th>discount</th>\n",
       "      <th>informational</th>\n",
       "      <th>web</th>\n",
       "      <th>email</th>\n",
       "      <th>mobile</th>\n",
       "      <th>social</th>\n",
       "      <th>duration_by_hours</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10</td>\n",
       "      <td>['email', 'mobile', 'social']</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>bogo</td>\n",
       "      <td>ae264e3637204a6fb9bb56bc8210ddfd</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10</td>\n",
       "      <td>['web', 'email', 'mobile', 'social']</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>bogo</td>\n",
       "      <td>4d5c57ea9a6940dd891ad53e9dbe8da0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>['web', 'email', 'mobile']</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>informational</td>\n",
       "      <td>3f207df678b143eea3cee63160fa8bed</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>['web', 'email', 'mobile']</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>bogo</td>\n",
       "      <td>9b98b8c7a33c4b65b9aebfe6a799e6d9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>['web', 'email']</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>discount</td>\n",
       "      <td>0b1e1539f2cc45b7b9fa7c272da2e1d7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3</td>\n",
       "      <td>['web', 'email', 'mobile', 'social']</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>discount</td>\n",
       "      <td>2298d6c36e964ae4a3e7e9706d1fb8c2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2</td>\n",
       "      <td>['web', 'email', 'mobile', 'social']</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>discount</td>\n",
       "      <td>fafdcd668e3743c1bb461111dcafc2a4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>['email', 'mobile', 'social']</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>informational</td>\n",
       "      <td>5a8bc65990b245e5a138643cd4eb9837</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>5</td>\n",
       "      <td>['web', 'email', 'mobile', 'social']</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>bogo</td>\n",
       "      <td>f19421c1d4aa40978ebb69ca19b0e20d</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2</td>\n",
       "      <td>['web', 'email', 'mobile']</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>discount</td>\n",
       "      <td>2906b810c7d4411798c6938adc9daaa5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>168</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   reward                              channels  difficulty  duration  \\\n",
       "0      10         ['email', 'mobile', 'social']          10         7   \n",
       "1      10  ['web', 'email', 'mobile', 'social']          10         5   \n",
       "2       0            ['web', 'email', 'mobile']           0         4   \n",
       "3       5            ['web', 'email', 'mobile']           5         7   \n",
       "4       5                      ['web', 'email']          20        10   \n",
       "5       3  ['web', 'email', 'mobile', 'social']           7         7   \n",
       "6       2  ['web', 'email', 'mobile', 'social']          10        10   \n",
       "7       0         ['email', 'mobile', 'social']           0         3   \n",
       "8       5  ['web', 'email', 'mobile', 'social']           5         5   \n",
       "9       2            ['web', 'email', 'mobile']          10         7   \n",
       "\n",
       "      offer_type                          offer_id  bogo  discount  \\\n",
       "0           bogo  ae264e3637204a6fb9bb56bc8210ddfd     1         0   \n",
       "1           bogo  4d5c57ea9a6940dd891ad53e9dbe8da0     1         0   \n",
       "2  informational  3f207df678b143eea3cee63160fa8bed     0         0   \n",
       "3           bogo  9b98b8c7a33c4b65b9aebfe6a799e6d9     1         0   \n",
       "4       discount  0b1e1539f2cc45b7b9fa7c272da2e1d7     0         1   \n",
       "5       discount  2298d6c36e964ae4a3e7e9706d1fb8c2     0         1   \n",
       "6       discount  fafdcd668e3743c1bb461111dcafc2a4     0         1   \n",
       "7  informational  5a8bc65990b245e5a138643cd4eb9837     0         0   \n",
       "8           bogo  f19421c1d4aa40978ebb69ca19b0e20d     1         0   \n",
       "9       discount  2906b810c7d4411798c6938adc9daaa5     0         1   \n",
       "\n",
       "   informational  web  email  mobile  social  duration_by_hours  \n",
       "0              0    0      1       1       1                168  \n",
       "1              0    1      1       1       1                120  \n",
       "2              1    1      1       1       0                 96  \n",
       "3              0    1      1       1       0                168  \n",
       "4              0    1      1       0       0                240  \n",
       "5              0    1      1       1       1                168  \n",
       "6              0    1      1       1       1                240  \n",
       "7              1    0      1       1       1                 72  \n",
       "8              0    1      1       1       1                120  \n",
       "9              0    1      1       1       0                168  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#rename the 'id' column as 'offer_id'\n",
    "portfolio.rename(columns={'id': 'offer_id'}, inplace=True)\n",
    "\n",
    "#one_hot_encoding the 'offer_type' column\n",
    "offers = pd.get_dummies(portfolio['offer_type'])\n",
    "clean_portfolio = pd.concat([portfolio, offers], axis = 1)\n",
    "\n",
    "#Seperating list values in 'channels' column into new columns and also one_hot_encodes them\n",
    "def list_breaker(df, column, value):\n",
    "    \n",
    "    \"\"\"\n",
    "    This function seperates the 'channels' column into new columns and also one_hot_encodes them\n",
    "    ARGS:\n",
    "        df - dataset\n",
    "        column - specific column to be worked on\n",
    "        value - for each value in the lists, (i.e, 'email', 'web', 'social', 'mobile')\n",
    "    \"\"\"\n",
    "    \n",
    "    df[value] = df[column].apply(lambda x: 1 if value in x else 0)\n",
    "    return df\n",
    "\n",
    "#if left at the function above, the function will have to be called multiple times. \n",
    "#To avoid this, another function will be created to iterate over the values\n",
    "def applier(df):\n",
    "    \"\"\"\n",
    "    ARGS:\n",
    "        df - dataset\n",
    "    \"\"\"\n",
    "    values = ['web', 'email', 'mobile', 'social']\n",
    "    for value in values:\n",
    "        result = list_breaker(df, 'channels', value) #previous function created is called\n",
    "        print(result)\n",
    "        \n",
    "#calling the applier function\n",
    "applier(clean_portfolio)\n",
    "\n",
    "#transforming the 'duration' column values from days to hours, multiplying values by 24\n",
    "clean_portfolio['duration_by_hours'] = clean_portfolio['duration']*24\n",
    "clean_portfolio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reward</th>\n",
       "      <th>difficulty</th>\n",
       "      <th>offer_id</th>\n",
       "      <th>bogo</th>\n",
       "      <th>discount</th>\n",
       "      <th>informational</th>\n",
       "      <th>web</th>\n",
       "      <th>email</th>\n",
       "      <th>mobile</th>\n",
       "      <th>social</th>\n",
       "      <th>duration_by_hours</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>ae264e3637204a6fb9bb56bc8210ddfd</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>4d5c57ea9a6940dd891ad53e9dbe8da0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3f207df678b143eea3cee63160fa8bed</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>9b98b8c7a33c4b65b9aebfe6a799e6d9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>20</td>\n",
       "      <td>0b1e1539f2cc45b7b9fa7c272da2e1d7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>2298d6c36e964ae4a3e7e9706d1fb8c2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>fafdcd668e3743c1bb461111dcafc2a4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5a8bc65990b245e5a138643cd4eb9837</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>f19421c1d4aa40978ebb69ca19b0e20d</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>2906b810c7d4411798c6938adc9daaa5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>168</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   reward  difficulty                          offer_id  bogo  discount  \\\n",
       "0      10          10  ae264e3637204a6fb9bb56bc8210ddfd     1         0   \n",
       "1      10          10  4d5c57ea9a6940dd891ad53e9dbe8da0     1         0   \n",
       "2       0           0  3f207df678b143eea3cee63160fa8bed     0         0   \n",
       "3       5           5  9b98b8c7a33c4b65b9aebfe6a799e6d9     1         0   \n",
       "4       5          20  0b1e1539f2cc45b7b9fa7c272da2e1d7     0         1   \n",
       "5       3           7  2298d6c36e964ae4a3e7e9706d1fb8c2     0         1   \n",
       "6       2          10  fafdcd668e3743c1bb461111dcafc2a4     0         1   \n",
       "7       0           0  5a8bc65990b245e5a138643cd4eb9837     0         0   \n",
       "8       5           5  f19421c1d4aa40978ebb69ca19b0e20d     1         0   \n",
       "9       2          10  2906b810c7d4411798c6938adc9daaa5     0         1   \n",
       "\n",
       "   informational  web  email  mobile  social  duration_by_hours  \n",
       "0              0    0      1       1       1                168  \n",
       "1              0    1      1       1       1                120  \n",
       "2              1    1      1       1       0                 96  \n",
       "3              0    1      1       1       0                168  \n",
       "4              0    1      1       0       0                240  \n",
       "5              0    1      1       1       1                168  \n",
       "6              0    1      1       1       1                240  \n",
       "7              1    0      1       1       1                 72  \n",
       "8              0    1      1       1       1                120  \n",
       "9              0    1      1       1       0                168  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#dropping unnecessary columns\n",
    "clean_portfolio.drop(columns = ['offer_type', 'duration', 'channels'], axis = 1, inplace = True)\n",
    "clean_portfolio"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.2 Profile Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>id</th>\n",
       "      <th>became_member_on</th>\n",
       "      <th>income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>118</td>\n",
       "      <td>68be06ca386d4c31939f3a4f0e3dd783</td>\n",
       "      <td>20170212</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>F</td>\n",
       "      <td>55</td>\n",
       "      <td>0610b486422d4921ae7d2bf64640c50b</td>\n",
       "      <td>20170715</td>\n",
       "      <td>112000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>118</td>\n",
       "      <td>38fe809add3b4fcf9315a9694bb96ff5</td>\n",
       "      <td>20180712</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>F</td>\n",
       "      <td>75</td>\n",
       "      <td>78afa995795e4d85b5d9ceeca43f5fef</td>\n",
       "      <td>20170509</td>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>118</td>\n",
       "      <td>a03223e636434f42ac4c3df47e8bac43</td>\n",
       "      <td>20170804</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  gender  age                                id  became_member_on    income\n",
       "0    NaN  118  68be06ca386d4c31939f3a4f0e3dd783          20170212       NaN\n",
       "1      F   55  0610b486422d4921ae7d2bf64640c50b          20170715  112000.0\n",
       "2    NaN  118  38fe809add3b4fcf9315a9694bb96ff5          20180712       NaN\n",
       "3      F   75  78afa995795e4d85b5d9ceeca43f5fef          20170509  100000.0\n",
       "4    NaN  118  a03223e636434f42ac4c3df47e8bac43          20170804       NaN"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#viewing the profile dataset\n",
    "profile.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "from the dataset above, we can see that there are null values.  the next step will be to get the rows were there are null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([118])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "null_profile_values = profile[profile['gender'].isnull()]\n",
    "null_profile_values['age'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above tells us that the null values have only '118' as the age. Therefore the next step will be to drop the null values as identified previously"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "gender              0\n",
       "age                 0\n",
       "id                  0\n",
       "became_member_on    0\n",
       "income              0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "profile.drop(index = null_profile_values.index, inplace = True)\n",
    "\n",
    "#to confirm there are no more null values in the profile dataset, we confirm with this:\n",
    "profile.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>customer_id</th>\n",
       "      <th>became_member_on</th>\n",
       "      <th>income</th>\n",
       "      <th>became_member_year</th>\n",
       "      <th>became_member_month</th>\n",
       "      <th>became_member_day</th>\n",
       "      <th>membership_tenure</th>\n",
       "      <th>age_grade</th>\n",
       "      <th>...</th>\n",
       "      <th>month_6</th>\n",
       "      <th>month_7</th>\n",
       "      <th>month_8</th>\n",
       "      <th>month_9</th>\n",
       "      <th>month_10</th>\n",
       "      <th>month_11</th>\n",
       "      <th>month_12</th>\n",
       "      <th>gender_F</th>\n",
       "      <th>gender_M</th>\n",
       "      <th>gender_O</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>F</td>\n",
       "      <td>55</td>\n",
       "      <td>0610b486422d4921ae7d2bf64640c50b</td>\n",
       "      <td>2017-07-15</td>\n",
       "      <td>112000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>15</td>\n",
       "      <td>1284</td>\n",
       "      <td>50s</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>F</td>\n",
       "      <td>75</td>\n",
       "      <td>78afa995795e4d85b5d9ceeca43f5fef</td>\n",
       "      <td>2017-05-09</td>\n",
       "      <td>100000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>1351</td>\n",
       "      <td>70s</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>M</td>\n",
       "      <td>68</td>\n",
       "      <td>e2127556f4f64592b11af22de27a7932</td>\n",
       "      <td>2018-04-26</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>999</td>\n",
       "      <td>60s</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>M</td>\n",
       "      <td>65</td>\n",
       "      <td>389bc3fa690240e798340f5a15918d5c</td>\n",
       "      <td>2018-02-09</td>\n",
       "      <td>53000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>1075</td>\n",
       "      <td>60s</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>M</td>\n",
       "      <td>58</td>\n",
       "      <td>2eeac8d8feae4a8cad5a6af0499a211d</td>\n",
       "      <td>2017-11-11</td>\n",
       "      <td>51000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>1165</td>\n",
       "      <td>50s</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16995</th>\n",
       "      <td>F</td>\n",
       "      <td>45</td>\n",
       "      <td>6d5f3a774f3d4714ab0c092238f3a1d7</td>\n",
       "      <td>2018-06-04</td>\n",
       "      <td>54000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>960</td>\n",
       "      <td>40s</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16996</th>\n",
       "      <td>M</td>\n",
       "      <td>61</td>\n",
       "      <td>2cb4f97358b841b9a9773a7aa05a9d77</td>\n",
       "      <td>2018-07-13</td>\n",
       "      <td>72000.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>7</td>\n",
       "      <td>13</td>\n",
       "      <td>921</td>\n",
       "      <td>60s</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16997</th>\n",
       "      <td>M</td>\n",
       "      <td>49</td>\n",
       "      <td>01d26f638c274aa0b965d24cefe3183f</td>\n",
       "      <td>2017-01-26</td>\n",
       "      <td>73000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>1454</td>\n",
       "      <td>40s</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16998</th>\n",
       "      <td>F</td>\n",
       "      <td>83</td>\n",
       "      <td>9dc1421481194dcd9400aec7c9ae6366</td>\n",
       "      <td>2016-03-07</td>\n",
       "      <td>50000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>1779</td>\n",
       "      <td>80s</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16999</th>\n",
       "      <td>F</td>\n",
       "      <td>62</td>\n",
       "      <td>e4052622e5ba45a8b96b59aba68cf068</td>\n",
       "      <td>2017-07-22</td>\n",
       "      <td>82000.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>7</td>\n",
       "      <td>22</td>\n",
       "      <td>1277</td>\n",
       "      <td>60s</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>14825 rows Ã— 52 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      gender  age                       customer_id became_member_on  \\\n",
       "1          F   55  0610b486422d4921ae7d2bf64640c50b       2017-07-15   \n",
       "3          F   75  78afa995795e4d85b5d9ceeca43f5fef       2017-05-09   \n",
       "5          M   68  e2127556f4f64592b11af22de27a7932       2018-04-26   \n",
       "8          M   65  389bc3fa690240e798340f5a15918d5c       2018-02-09   \n",
       "12         M   58  2eeac8d8feae4a8cad5a6af0499a211d       2017-11-11   \n",
       "...      ...  ...                               ...              ...   \n",
       "16995      F   45  6d5f3a774f3d4714ab0c092238f3a1d7       2018-06-04   \n",
       "16996      M   61  2cb4f97358b841b9a9773a7aa05a9d77       2018-07-13   \n",
       "16997      M   49  01d26f638c274aa0b965d24cefe3183f       2017-01-26   \n",
       "16998      F   83  9dc1421481194dcd9400aec7c9ae6366       2016-03-07   \n",
       "16999      F   62  e4052622e5ba45a8b96b59aba68cf068       2017-07-22   \n",
       "\n",
       "         income  became_member_year  became_member_month  became_member_day  \\\n",
       "1      112000.0                2017                    7                 15   \n",
       "3      100000.0                2017                    5                  9   \n",
       "5       70000.0                2018                    4                 26   \n",
       "8       53000.0                2018                    2                  9   \n",
       "12      51000.0                2017                   11                 11   \n",
       "...         ...                 ...                  ...                ...   \n",
       "16995   54000.0                2018                    6                  4   \n",
       "16996   72000.0                2018                    7                 13   \n",
       "16997   73000.0                2017                    1                 26   \n",
       "16998   50000.0                2016                    3                  7   \n",
       "16999   82000.0                2017                    7                 22   \n",
       "\n",
       "       membership_tenure age_grade  ... month_6  month_7  month_8  month_9  \\\n",
       "1                   1284       50s  ...       0        1        0        0   \n",
       "3                   1351       70s  ...       0        0        0        0   \n",
       "5                    999       60s  ...       0        0        0        0   \n",
       "8                   1075       60s  ...       0        0        0        0   \n",
       "12                  1165       50s  ...       0        0        0        0   \n",
       "...                  ...       ...  ...     ...      ...      ...      ...   \n",
       "16995                960       40s  ...       1        0        0        0   \n",
       "16996                921       60s  ...       0        1        0        0   \n",
       "16997               1454       40s  ...       0        0        0        0   \n",
       "16998               1779       80s  ...       0        0        0        0   \n",
       "16999               1277       60s  ...       0        1        0        0   \n",
       "\n",
       "       month_10  month_11  month_12  gender_F  gender_M  gender_O  \n",
       "1             0         0         0         1         0         0  \n",
       "3             0         0         0         1         0         0  \n",
       "5             0         0         0         0         1         0  \n",
       "8             0         0         0         0         1         0  \n",
       "12            0         1         0         0         1         0  \n",
       "...         ...       ...       ...       ...       ...       ...  \n",
       "16995         0         0         0         1         0         0  \n",
       "16996         0         0         0         0         1         0  \n",
       "16997         0         0         0         0         1         0  \n",
       "16998         0         0         0         1         0         0  \n",
       "16999         0         0         0         1         0         0  \n",
       "\n",
       "[14825 rows x 52 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cleaning the profile dataset\n",
    "\n",
    "#now that null values are taken care of, we will move on to cleaning the profile dataset. \n",
    "\n",
    "#transforming the 'became_member_on' column to date format\n",
    "\n",
    "from datetime import datetime #importing the datetime module to be used\n",
    "profile['became_member_on'] = pd.to_datetime(profile['became_member_on'], format = '%Y%m%d')\n",
    "\n",
    "#next we seperate the dates in the 'became_member_on' column into distinct columns: \n",
    "#'became_member_year (year)'\n",
    "# became_member_month (month)\n",
    "# became_member_day (day)\n",
    "#we will furthermore, calculate the period the customers have been members.\n",
    "def date_seperator(profile):\n",
    "    \"\"\"\n",
    "    This function seperates the date column 'became_member_on' into disctinct columns itemized above\n",
    "    ARGS:\n",
    "        profile - profile dataset\n",
    "    \"\"\"\n",
    "    profile['became_member_year'] = pd.to_datetime(profile['became_member_on'],format='%Y%m%d').dt.year\n",
    "    profile['became_member_month'] = pd.to_datetime(profile['became_member_on'],format='%Y%m%d').dt.month\n",
    "    profile['became_member_day'] = pd.to_datetime(profile['became_member_on'],format='%Y%m%d').dt.day\n",
    "    profile['membership_tenure'] = (datetime.today().date() - pd.to_datetime(profile['became_member_on'],format='%Y%m%d').dt.date).dt.days\n",
    "    return profile\n",
    "\n",
    "date_seperator(profile)\n",
    "\n",
    "#creating age_grade column from 'age' column in the profile dataset\n",
    "profile['age_grade'] = pd.cut(profile['age'], bins=range(10,120,10),right=False, \n",
    "              labels=['10s','20s', '30s', '40s', '50s','60s', '70s', '80s', '90s', '100s'])\n",
    "\n",
    "#creating income_range column from 'income' column in the dataset\n",
    "profile['income_range'] = pd.cut(profile['income'], bins=range(30000,140000,10000), right=False, \n",
    "                                          labels=['30ths','40ths', '50ths', \n",
    "                                                  '60ths', '70ths','80ths', \n",
    "                                                  '90ths', '100ths', '110ths', '120ths'])\n",
    "\n",
    "\n",
    "#one_hot_encoding the 'became_member_year', 'became_member_month', 'income_range', 'age_grade' columns\n",
    "def one_hot_encoder(df, column, value):\n",
    "    \"\"\"\n",
    "    This function creates dummies for any column keyed in\n",
    "    ARGS:\n",
    "        df - dataset\n",
    "        column - column to be one_hot_encoded\n",
    "        value - the value that will serve as prefix (see the line of return below)\n",
    "    \"\"\"\n",
    "    return pd.get_dummies(profile[column], prefix = value, prefix_sep = '_')\n",
    "\n",
    "#creating the columns mentioned above the calling the functions\n",
    "age_grade_dummies = one_hot_encoder(profile, 'age_grade', 'age_grade')\n",
    "income_range_dummies = one_hot_encoder(profile, 'income_range', 'income_range')\n",
    "year_membership_dummies = one_hot_encoder(profile, 'became_member_year', 'year')\n",
    "month_membership_dummies = one_hot_encoder(profile, 'became_member_month', 'month')\n",
    "gender_dummies = one_hot_encoder(profile, 'gender', 'gender')\n",
    "\n",
    "#creating a cleaned dataset by joining the one_hot_encoded values to the profile dataset \n",
    "clean_profile = pd.concat([profile, age_grade_dummies, income_range_dummies,\n",
    "                          year_membership_dummies, month_membership_dummies,gender_dummies]\n",
    "                          , axis = 1)\n",
    "\n",
    "#renaming the id column to customer_id\n",
    "clean_profile.rename(columns={'id': 'customer_id'}, inplace=True)\n",
    "\n",
    "clean_profile"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2.1 Data Visualization of Profile Datatset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#In plotting elements from the Profile Dataset, we will be plotting the following items\n",
    "# Income_range Frequency distribution\n",
    "# Age_grade frequency distribution\n",
    "# Gender Frequency distribtuion\n",
    "# Gender distribution by year\n",
    "# Income_range distribution by year\n",
    "# Age_grade distribution by year\n",
    "\n",
    "#We will make use of the following functions\n",
    "def distribution_plotter(df, column, colour):\n",
    "    \"\"\"\n",
    "    This function will plot the distribution of the desired column\n",
    "    ARGS:\n",
    "        df - dataset\n",
    "        column - desired column\n",
    "        colour - desired colour of the bar chart\n",
    "    \"\"\"\n",
    "    x = df[column].unique() #the unique values will form the x axis\n",
    "    y = clean_profile[column].value_counts() #Frequency\n",
    "    fig=plt.figure(figsize = (10,6)) #size of bar_chart\n",
    "    plt.xlabel(column)\n",
    "    plt.ylabel('Frequency')\n",
    "    plt.title('{} distribution'.format(column))\n",
    "    plt.bar(x,y, color = colour)\n",
    "    \n",
    "    \n",
    "#Plotting desired column by year\n",
    "def double_distribution_plotter(df, primary_column, column):\n",
    "    \"\"\"\n",
    "    This function will plot the distribution of the desired column by year\n",
    "    ARGS:\n",
    "        df - dataset\n",
    "        primary_column - column to group by\n",
    "        column - desired column\n",
    "        colour - desired colour of the bar chart \n",
    "    \"\"\"\n",
    "    collated_set = df.groupby([primary_column, column]).size()\n",
    "    collated_set = collated_set.reset_index()\n",
    "    collated_set.columns = [primary_column, column, 'count']\n",
    "    \n",
    "    plt.figure(figsize = (10,5))\n",
    "    sns.barplot(x = primary_column, y = 'count', hue = column, data = collated_set)\n",
    "    plt.xlabel('Year')\n",
    "    plt.ylabel('Frequency')\n",
    "    plt.title('{} counts by {}'.format(column, 'year'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Income_range Frequency distribution\n",
    "distribution_plotter(clean_profile, 'income_range', 'blue')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Income Distribution\n",
    "\n",
    "The chart above visualizes the income range distribution in the dataset. Accordingly, it is seen that the highest salary range is the 110ths (i.e 110,000 upwards) with a frequency of about 2,500. From the graph, we can also identify that majority of Starbucks subscribers are high income earners, as majority of the members earn between 50,000 and 110,000. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Age_grade frequency distribution\n",
    "distribution_plotter(clean_profile, 'age_grade', 'orange')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Age Distribution\n",
    "\n",
    "It is seen from the chart above that most Starbucks subscribers are within the 50s age bracket. Majority of Starbucks customers are within the ages of 20 and 50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Gender distribution by year\n",
    "double_distribution_plotter(clean_profile, 'became_member_year', 'gender')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Gender Distribution by Year\n",
    "\n",
    "This graph depicts the gender distribution by year. Except for 2016, all other years had more males subscribing to Starbucks. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Income_range distribution by year\n",
    "double_distribution_plotter(clean_profile, 'became_member_year', 'income_range')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Income Range by Year\n",
    "\n",
    "This chart depicts the income of people you subscribed to starbucks yearly between 2013 and 2018. From the data depicted, we see that yearly, people with incomes within the 50ths (50,000s) range, Subscribed. This is so except for yeat 2015, which saw people with income in ranges 60ths (60,000) Subscribing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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5DDBNV/PAWcRvQ7pP4k+vmJnO/vNo+XpuoXAN4+kTfnkzOwNohf1X+LuL8erroiET4maiIiISIrS1KeIiIhIilKiJiIiIpKieiY7gEQ5+eSTfdCgQckOQ0RERKRdf/zjH99298PentJlE7VBgwZRX1+f7DBERERE2mVmb7ZUrqlPERERkRSlRE1EREQkRSlRExEREUlRXfYatZZ89NFHNDY28sEHHyQ7lIQ75phjyMrKolevXskORURERI5Qt0rUGhsb6d27N4MGDcLMkh1Owrg727Zto7GxkcGDByc7HBERETlC3Wrq84MPPqBfv35dOkkDMDP69evXLUYORUREurJulagBXT5JO6C7nKeIiEhX1u0SNREREZHOQolaJ/Hss89y8cUXJzsMERERCZEStSRyd/bv35/sMERERCRFdftE7ZJLLmH06NEMHz6c+fPnA7BgwQLOOOMMJk6cyFe+8hVuueUWALZu3cpll13G2LFjGTt2LC+88EKr7W7dupXCwkJGjRrFV7/6VU477TTefvtt3njjDYYOHco//MM/MGrUKDZt2sTNN9/MmDFjGD58OHfeeefBNp566inOOussJkyYwOOPP36w/L333uP6669n7NixjBw5kurq6gT1joiIiCRTt3o8R0t++tOf0rdvX95//33Gjh3LRRddxHe/+11WrlxJ7969Of/88xkxYgQAs2bN4h//8R+ZMGECGzdupKioiLVr17bY7l133cX5559PeXk5Tz311MEkEOC1117joYce4sc//jEAFRUV9O3bl3379jFp0iRWr17NGWecwVe+8hXq6uo4/fTTufLKKw/uX1FRwfnnn89Pf/pT3nnnHQoKCrjgggs47rjjEthTIiJyqPtv/VWr2265+0shRiJdVbdP1H70ox/xy1/+EoBNmzbx8MMPc95559G3b18ArrjiCv7yl78A8Mwzz7BmzZqD++7cuZNdu3bRu3fvw9r93e9+d7DdyZMn06dPn4PbTjvtNM4555yD60uWLGH+/Pns3buXpqYm1qxZw/79+xk8eDA5OTkAXHPNNQeTvaeffpqamhq+//3vA9HHjmzcuJGhQ4fGrV9EREQk+bp1ovbss8/yzDPP8OKLL3LssccyceJEzjzzzFZHyfbv38+LL75IWlpau227e6vbYke+NmzYwPe//33+8Ic/0KdPH6699tqDzz9r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Jkzgby9k+Lja2trDysrLyykvL090WCIiIpKCNKImIiIikqKUqImIiIikKCVqIiIiIilKiZqIiIhIiurWNxOIiIgkSsU1l7e5/faFj4YUiXRmGlETERERSVFK1EL2wQcfUFBQwIgRIxg+fDh33nknANu3b6ewsJCcnBwKCwvZsWNHkiMVERGRZOvWU5/j7xsf1/Ze+PoL7dY5+uijqaur4/jjj+ejjz5iwoQJfOELX+Dxxx9n0qRJlJWVEYlEiEQiVFZWxjU+ERER6Vw0ohYyM+P4448Hou/8/OijjzAzqqurKS0tBaC0tJRly5YB0NDQQEFBAfn5+eTl5bFu3bqkxS4iIiLhUqKWBPv27SM/P5/09HQKCws5++yzaW5uJjMzE4DMzEy2bNkCwLx585g1axarVq2ivr6erKysZIYuIiIiIVKilgQ9evRg1apVNDY2smLFCl555ZVW644bN465c+dSWVnJm2++SVpaWoiRioiISDIpUUuik046iYkTJ/LUU0+RkZFBU1MTAE1NTaSnpwMwffp0ampqSEtLo6ioiLq6umSGLCIiIiFSohayrVu38s477wDw/vvv88wzz3DWWWdRXFxMVVUVAFVVVZSUlACwfv16hgwZwsyZMykuLmb16tVJi11ERETC1a3v+kyGpqYmSktL2bdvH/v372fq1KlcfPHFjBs3jqlTp7JgwQKys7NZunQpAIsXL2bhwoX06tWL/v37M3v27CSfgYiIiISlWydqHXmcRrzl5eXx8ssvH1ber18/amtrDysvLy+nvLw8jNBEREQkxWjqU0RERCRFKVETERERSVFK1ERERERSlBI1ERERkRSlRE1EREQkRSlRExEREUlRStSSYN++fYwcOZKLL74YgO3bt1NYWEhOTg6FhYXs2LEjyRGKiIhIKujWz1F77tzz4treec8/16F69957L0OHDmXnzp0ARCIRJk2aRFlZGZFIhEgkQmVlZVxjExERkc4nYSNqZvZTM9tiZq/ElPU1s+Vmti742SdmW7mZvW5mr5lZUUz5aDP7c7DtR2ZmiYo5DI2Njfznf/4nN95448Gy6upqSktLASgtLWXZsmUANDQ0UFBQQH5+Pnl5eaxbty4pMYuIiEhyJHLq82fA5EPKyoBad88BaoN1zGwYcBUwPNjnx2bWI9jn34CbgJzgc2ibnco3vvEN/uVf/oXPfOZvXd/c3ExmZiYAmZmZbNmyBYB58+Yxa9YsVq1aRX19PVlZWUmJWURERJIjYYmauz8PbD+kuASoCpargEtiyhe5+4fuvgF4HSgws0zgBHd/0d0d+HnMPp3Or3/9a9LT0xk9enSH6o8bN465c+dSWVnJm2++SVpaWoIjFBERkVQS9s0EGe7eBBD8TA/KBwKbYuo1BmUDg+VDyzulF154gZqaGgYNGsRVV11FXV0d11xzDRkZGTQ1NQHRl7anp0e7Zfr06dTU1JCWlkZRURF1dXXJDF9ERERClip3fbZ03Zm3Ud5yI2Y3mVm9mdVv3bo1bsHFy/e+9z0aGxt54403WLRoEeeffz4LFy6kuLiYqqroQGNVVRUlJSUArF+/niFDhjBz5kyKi4tZvXp1MsMXERGRkIWdqDUH05kEP7cE5Y3AqTH1soC3gvKsFspb5O7z3X2Mu4855ZRT4hp4IpWVlbF8+XJycnJYvnw5ZWVlACxevJjc3Fzy8/N59dVXmTFjRpIjFRERkTCF/XiOGqAUiAQ/q2PK/8PMfgAMIHrTwAp332dmu8zsHOD3wAzgvngF09HHaSTCxIkTmThxIgD9+vWjtrb2sDrl5eWUl5eHHJmIiIikioQlamb2CDARONnMGoE7iSZoS8zsBmAjcAWAuzeY2RJgDbAX+Jq77wuaupnoHaRpwJPBR0RERKTLS1ii5u7TWtk0qZX6FUBFC+X1QG4cQxMRERHpFFLlZgIREREROYQSNREREZEUpURNREREJEUpURMRERFJUWE/nkOAQYMG0bt3b3r06EHPnj2pr69n+/btXHnllbzxxhsMGjSIJUuW0KdPn/YbExERkS6rWydq99/6q7i2d8vdX+pw3d/+9recfPLJB9cjkQiTJk2irKyMSCRCJBKhsrIyrvGJiIhI56KpzxRRXV1NaWkpAKWlpSxbtgyAhoYGCgoKyM/PJy8vj3Xr1iUzTBEREQmRErUkMDMuvPBCRo8ezfz58wFobm4mMzMTgMzMTLZsib5da968ecyaNYtVq1ZRX19PVlZWq+2KiIhI19Ktpz6T5YUXXmDAgAFs2bKFwsJCzjrrrFbrjhs3joqKChobG5kyZQo5OTkhRioiIiLJpBG1JBgwYAAA6enpXHrppaxYsYKMjAyampoAaGpqIj09HYDp06dTU1NDWloaRUVF1NXVJS1uERERCZcStZC999577Nq16+Dy008/TW5uLsXFxVRVVQFQVVVFSUkJAOvXr2fIkCHMnDmT4uJiVq9enbTYRUREJFya+gxZc3Mzl156KQB79+5l+vTpTJ48mbFjxzJ16lQWLFhAdnY2S5cuBWDx4sUsXLiQXr160b9/f2bPnp3M8EVERCRE3TpR+ySP04iXIUOG8Kc//emw8n79+lFbW3tYeXl5OeXl5WGEJiIiIilGU58iIiIiKUqJmoiIiEiKUqImIiIikqKUqImIiIikKCVqIiIiIilKiZqIiIhIilKilgTvvPMOl19+OWeddRZDhw7lxRdfZPv27RQWFpKTk0NhYSE7duxIdpgiIiKSZN36OWoV11we1/ZuX/hoh+rNmjWLyZMn8+ijj7Jnzx52797N3LlzmTRpEmVlZUQiESKRCJWVlXGNT0REPpnnzj2v7QpjbwsnEOm2NKIWsp07d/L8889zww03AHDUUUdx0kknUV1dTWlpKQClpaUsW7YMgIaGBgoKCsjPzycvL49169YlLXYREREJlxK1kK1fv55TTjmF6667jpEjR3LjjTfy3nvv0dzcTGZmJgCZmZls2bIFgHnz5jFr1ixWrVpFfX09WVlZyQxfREREQqRELWR79+5l5cqV3Hzzzbz88sscd9xxRCKRVuuPGzeOuXPnUllZyZtvvklaWlqI0YqIiEgyKVELWVZWFllZWZx99tkAXH755axcuZKMjAyampoAaGpqIj09HYDp06dTU1NDWloaRUVF1NXVJS12ERERCZcStZD179+fU089lddeew2A2tpahg0bRnFxMVVVVQBUVVVRUlICRKdKhwwZwsyZMykuLmb16tVJi11ERETC1a3v+kyW++67j6uvvpo9e/YwZMgQHnroIfbv38/UqVNZsGAB2dnZLF26FIDFixezcOFCevXqRf/+/Zk9e3aSoxcREZGwdOtEraOP04i3/Px86uvrDyuvra09rKy8vJzy8vIwwhIREZEUo6lPERERkRSlRE1EREQkRSUlUTOzfzSzBjN7xcweMbNjzKyvmS03s3XBzz4x9cvN7HUze83MipIRs4iIiEjYOnSNmpnluvsr8TigmQ0EZgLD3P19M1sCXAUMA2rdPWJmZUAZ8C0zGxZsHw4MAJ4xszPcfV884hEREZHO4/5bf9Xqtlvu/lKIkYSjoyNq88xshZn9g5md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\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Age_grade distribution by year\n",
    "double_distribution_plotter(clean_profile, 'became_member_year', 'age_grade')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Age Distribution by Year\n",
    "\n",
    "This chart depics the ages of people who subscribed to Starbucks every year from 2013 to 2018. From the chart, we can tell that between 2014 to 2018, the age of people you obtained membership were with the 50s age bracker. 2013 was however different as it saw more people within the 60s age bracket"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['gender',\n",
       " 'age',\n",
       " 'customer_id',\n",
       " 'became_member_on',\n",
       " 'income',\n",
       " 'became_member_year',\n",
       " 'became_member_month',\n",
       " 'became_member_day',\n",
       " 'membership_tenure',\n",
       " 'age_grade',\n",
       " 'income_range',\n",
       " 'age_grade_10s',\n",
       " 'age_grade_20s',\n",
       " 'age_grade_30s',\n",
       " 'age_grade_40s',\n",
       " 'age_grade_50s',\n",
       " 'age_grade_60s',\n",
       " 'age_grade_70s',\n",
       " 'age_grade_80s',\n",
       " 'age_grade_90s',\n",
       " 'age_grade_100s',\n",
       " 'income_range_30ths',\n",
       " 'income_range_40ths',\n",
       " 'income_range_50ths',\n",
       " 'income_range_60ths',\n",
       " 'income_range_70ths',\n",
       " 'income_range_80ths',\n",
       " 'income_range_90ths',\n",
       " 'income_range_100ths',\n",
       " 'income_range_110ths',\n",
       " 'income_range_120ths',\n",
       " 'year_2013',\n",
       " 'year_2014',\n",
       " 'year_2015',\n",
       " 'year_2016',\n",
       " 'year_2017',\n",
       " 'year_2018',\n",
       " 'month_1',\n",
       " 'month_2',\n",
       " 'month_3',\n",
       " 'month_4',\n",
       " 'month_5',\n",
       " 'month_6',\n",
       " 'month_7',\n",
       " 'month_8',\n",
       " 'month_9',\n",
       " 'month_10',\n",
       " 'month_11',\n",
       " 'month_12',\n",
       " 'gender_F',\n",
       " 'gender_M',\n",
       " 'gender_O']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#getting list of columns in the dataset\n",
    "clean_profile.columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dropping the unnecessary columns in the dataset\n",
    "cols_to_drop = ['gender', 'age', 'became_member_on', 'income', 'age_grade', 'income_range', 'became_member_year', \n",
    "               'became_member_month']\n",
    "clean_profile.drop(columns = ['gender', 'age', 'became_member_on', 'income', 'age_grade', 'income_range', 'became_member_year', \n",
    "               'became_member_month'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>became_member_day</th>\n",
       "      <th>membership_tenure</th>\n",
       "      <th>age_grade_10s</th>\n",
       "      <th>age_grade_20s</th>\n",
       "      <th>age_grade_30s</th>\n",
       "      <th>age_grade_40s</th>\n",
       "      <th>age_grade_50s</th>\n",
       "      <th>age_grade_60s</th>\n",
       "      <th>age_grade_70s</th>\n",
       "      <th>...</th>\n",
       "      <th>month_6</th>\n",
       "      <th>month_7</th>\n",
       "      <th>month_8</th>\n",
       "      <th>month_9</th>\n",
       "      <th>month_10</th>\n",
       "      <th>month_11</th>\n",
       "      <th>month_12</th>\n",
       "      <th>gender_F</th>\n",
       "      <th>gender_M</th>\n",
       "      <th>gender_O</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0610b486422d4921ae7d2bf64640c50b</td>\n",
       "      <td>15</td>\n",
       "      <td>1284</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>78afa995795e4d85b5d9ceeca43f5fef</td>\n",
       "      <td>9</td>\n",
       "      <td>1351</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>e2127556f4f64592b11af22de27a7932</td>\n",
       "      <td>26</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>389bc3fa690240e798340f5a15918d5c</td>\n",
       "      <td>9</td>\n",
       "      <td>1075</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2eeac8d8feae4a8cad5a6af0499a211d</td>\n",
       "      <td>11</td>\n",
       "      <td>1165</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16995</th>\n",
       "      <td>6d5f3a774f3d4714ab0c092238f3a1d7</td>\n",
       "      <td>4</td>\n",
       "      <td>960</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16996</th>\n",
       "      <td>2cb4f97358b841b9a9773a7aa05a9d77</td>\n",
       "      <td>13</td>\n",
       "      <td>921</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16997</th>\n",
       "      <td>01d26f638c274aa0b965d24cefe3183f</td>\n",
       "      <td>26</td>\n",
       "      <td>1454</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16998</th>\n",
       "      <td>9dc1421481194dcd9400aec7c9ae6366</td>\n",
       "      <td>7</td>\n",
       "      <td>1779</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16999</th>\n",
       "      <td>e4052622e5ba45a8b96b59aba68cf068</td>\n",
       "      <td>22</td>\n",
       "      <td>1277</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>14825 rows Ã— 44 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            customer_id  became_member_day  membership_tenure  \\\n",
       "1      0610b486422d4921ae7d2bf64640c50b                 15               1284   \n",
       "3      78afa995795e4d85b5d9ceeca43f5fef                  9               1351   \n",
       "5      e2127556f4f64592b11af22de27a7932                 26                999   \n",
       "8      389bc3fa690240e798340f5a15918d5c                  9               1075   \n",
       "12     2eeac8d8feae4a8cad5a6af0499a211d                 11               1165   \n",
       "...                                 ...                ...                ...   \n",
       "16995  6d5f3a774f3d4714ab0c092238f3a1d7                  4                960   \n",
       "16996  2cb4f97358b841b9a9773a7aa05a9d77                 13                921   \n",
       "16997  01d26f638c274aa0b965d24cefe3183f                 26               1454   \n",
       "16998  9dc1421481194dcd9400aec7c9ae6366                  7               1779   \n",
       "16999  e4052622e5ba45a8b96b59aba68cf068                 22               1277   \n",
       "\n",
       "       age_grade_10s  age_grade_20s  age_grade_30s  age_grade_40s  \\\n",
       "1                  0              0              0              0   \n",
       "3                  0              0              0              0   \n",
       "5                  0              0              0              0   \n",
       "8                  0              0              0              0   \n",
       "12                 0              0              0              0   \n",
       "...              ...            ...            ...            ...   \n",
       "16995              0              0              0              1   \n",
       "16996              0              0              0              0   \n",
       "16997              0              0              0              1   \n",
       "16998              0              0              0              0   \n",
       "16999              0              0              0              0   \n",
       "\n",
       "       age_grade_50s  age_grade_60s  age_grade_70s  ...  month_6  month_7  \\\n",
       "1                  1              0              0  ...        0        1   \n",
       "3                  0              0              1  ...        0        0   \n",
       "5                  0              1              0  ...        0        0   \n",
       "8                  0              1              0  ...        0        0   \n",
       "12                 1              0              0  ...        0        0   \n",
       "...              ...            ...            ...  ...      ...      ...   \n",
       "16995              0              0              0  ...        1        0   \n",
       "16996              0              1              0  ...        0        1   \n",
       "16997              0              0              0  ...        0        0   \n",
       "16998              0              0              0  ...        0        0   \n",
       "16999              0              1              0  ...        0        1   \n",
       "\n",
       "       month_8  month_9  month_10  month_11  month_12  gender_F  gender_M  \\\n",
       "1            0        0         0         0         0         1         0   \n",
       "3            0        0         0         0         0         1         0   \n",
       "5            0        0         0         0         0         0         1   \n",
       "8            0        0         0         0         0         0         1   \n",
       "12           0        0         0         1         0         0         1   \n",
       "...        ...      ...       ...       ...       ...       ...       ...   \n",
       "16995        0        0         0         0         0         1         0   \n",
       "16996        0        0         0         0         0         0         1   \n",
       "16997        0        0         0         0         0         0         1   \n",
       "16998        0        0         0         0         0         1         0   \n",
       "16999        0        0         0         0         0         1         0   \n",
       "\n",
       "       gender_O  \n",
       "1             0  \n",
       "3             0  \n",
       "5             0  \n",
       "8             0  \n",
       "12            0  \n",
       "...         ...  \n",
       "16995         0  \n",
       "16996         0  \n",
       "16997         0  \n",
       "16998         0  \n",
       "16999         0  \n",
       "\n",
       "[14825 rows x 44 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_profile"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.3 Transcript Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>person</th>\n",
       "      <th>event</th>\n",
       "      <th>value</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78afa995795e4d85b5d9ceeca43f5fef</td>\n",
       "      <td>offer received</td>\n",
       "      <td>{'offer id': '9b98b8c7a33c4b65b9aebfe6a799e6d9'}</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>a03223e636434f42ac4c3df47e8bac43</td>\n",
       "      <td>offer received</td>\n",
       "      <td>{'offer id': '0b1e1539f2cc45b7b9fa7c272da2e1d7'}</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>e2127556f4f64592b11af22de27a7932</td>\n",
       "      <td>offer received</td>\n",
       "      <td>{'offer id': '2906b810c7d4411798c6938adc9daaa5'}</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8ec6ce2a7e7949b1bf142def7d0e0586</td>\n",
       "      <td>offer received</td>\n",
       "      <td>{'offer id': 'fafdcd668e3743c1bb461111dcafc2a4'}</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>68617ca6246f4fbc85e91a2a49552598</td>\n",
       "      <td>offer received</td>\n",
       "      <td>{'offer id': '4d5c57ea9a6940dd891ad53e9dbe8da0'}</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             person           event  \\\n",
       "0  78afa995795e4d85b5d9ceeca43f5fef  offer received   \n",
       "1  a03223e636434f42ac4c3df47e8bac43  offer received   \n",
       "2  e2127556f4f64592b11af22de27a7932  offer received   \n",
       "3  8ec6ce2a7e7949b1bf142def7d0e0586  offer received   \n",
       "4  68617ca6246f4fbc85e91a2a49552598  offer received   \n",
       "\n",
       "                                              value  time  \n",
       "0  {'offer id': '9b98b8c7a33c4b65b9aebfe6a799e6d9'}     0  \n",
       "1  {'offer id': '0b1e1539f2cc45b7b9fa7c272da2e1d7'}     0  \n",
       "2  {'offer id': '2906b810c7d4411798c6938adc9daaa5'}     0  \n",
       "3  {'offer id': 'fafdcd668e3743c1bb461111dcafc2a4'}     0  \n",
       "4  {'offer id': '4d5c57ea9a6940dd891ad53e9dbe8da0'}     0  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#loading the first five rows of the dataset\n",
    "transcript.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "person    0\n",
       "event     0\n",
       "value     0\n",
       "time      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking for null values in the dataset\n",
    "transcript.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Since there are no null values in the dataset, we move on to other cleaning processes\n",
    "\n",
    "#Changing the name of the column from 'Person' to 'customer_id'\n",
    "transcript.rename(columns = {'person':'customer_id'}, inplace = True)\n",
    "\n",
    "#Removing IDs that belong to those with '118' as age\n",
    "id_age_118 = null_profile_values['id'].unique().tolist()\n",
    "transcript['customer_id'].isin(id_age_118).value_counts()\n",
    "\n",
    "#Dropping the rows where IDs (in the transcript dataset) match those that belong to people aged 118\n",
    "transcript = transcript[~transcript['customer_id'].isin(id_age_118)] \n",
    "\n",
    "#We are done with the cleaning. The next task is to seperate the transcript data into offers_df and transaction_df\n",
    "#This will make it easy to seperate the dict values accordingly\n",
    "offer_events = ['offer received', 'offer viewed', 'offer completed']\n",
    "offer_index = transcript[transcript['event'].isin(offer_events)].index\n",
    "transaction_index = transcript[~transcript['event'].isin(offer_events)].index\n",
    "offers_df = transcript.loc[offer_index,:]\n",
    "transaction_df = transcript.loc[transaction_index,:]\n",
    "\n",
    "#While the two columns are now seperated, we see that the dict values in the value column are not cleaned\n",
    "#That's the next task. This will be done by creating two functions: offers_value_extractor and transaction_values_extractor\n",
    "\n",
    "def offers_value_extractor(df, column, value1, value2):\n",
    "    \"\"\"\n",
    "    This function will seperate the dict values in the offers_df\n",
    "    ARGS:\n",
    "        df - dataset\n",
    "        column - column to be seperated\n",
    "        value1 - the value to be replaced\n",
    "        value2 - the value that will replace value 1\n",
    "        it was noticed in the transcript dataset that some rows in the value column have 'offer id' instead of offer_id\n",
    "        hence, this will be replaced before extracting the values\n",
    "    \"\"\"\n",
    "    df[column] = df[column].str.replace(value1, value2)\n",
    "    list_of_values = df[column].map(eval)\n",
    "    result = pd.DataFrame(list_of_values.tolist())\n",
    "    return result\n",
    "\n",
    "def transaction_value_extractor(df, column):\n",
    "    \"\"\"\n",
    "    This function will seperate the dict values in the transaction_df\n",
    "    ARGS:\n",
    "        df - dataset\n",
    "        column - column to be seperated\n",
    "    \"\"\"\n",
    "    list_of_values = df[column].map(eval)\n",
    "    result = pd.DataFrame(list_of_values.tolist())\n",
    "    return result\n",
    "\n",
    "#Now we will call the extractor functions created and concat the columns to their respective dataset\n",
    "offers_id = offers_value_extractor(offers_df, 'value', 'offer id', 'offer_id')\n",
    "transaction_amount = transaction_value_extractor(transaction_df, 'value')\n",
    "offers_df = pd.concat([offers_df.reset_index(drop = True), \n",
    "                           offers_id.reset_index(drop = True)], axis = 1)\n",
    "transaction_df = pd.concat([transaction_df.reset_index(drop = True), transaction_amount], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(                             customer_id            event  \\\n",
       " 0       78afa995795e4d85b5d9ceeca43f5fef   offer received   \n",
       " 1       e2127556f4f64592b11af22de27a7932   offer received   \n",
       " 2       389bc3fa690240e798340f5a15918d5c   offer received   \n",
       " 3       2eeac8d8feae4a8cad5a6af0499a211d   offer received   \n",
       " 4       aa4862eba776480b8bb9c68455b8c2e1   offer received   \n",
       " ...                                  ...              ...   \n",
       " 148800  84fb57a7fe8045a8bf6236738ee73a0f     offer viewed   \n",
       " 148801  abc4359eb34e4e2ca2349da2ddf771b6     offer viewed   \n",
       " 148802  8dda575c2a1d44b9ac8e8b07b93d1f8e     offer viewed   \n",
       " 148803  8431c16f8e1d440880db371a68f82dd0  offer completed   \n",
       " 148804  24f56b5e1849462093931b164eb803b5  offer completed   \n",
       " \n",
       "                                                     value  time  \\\n",
       " 0        {'offer_id': '9b98b8c7a33c4b65b9aebfe6a799e6d9'}     0   \n",
       " 1        {'offer_id': '2906b810c7d4411798c6938adc9daaa5'}     0   \n",
       " 2        {'offer_id': 'f19421c1d4aa40978ebb69ca19b0e20d'}     0   \n",
       " 3        {'offer_id': '3f207df678b143eea3cee63160fa8bed'}     0   \n",
       " 4        {'offer_id': '0b1e1539f2cc45b7b9fa7c272da2e1d7'}     0   \n",
       " ...                                                   ...   ...   \n",
       " 148800   {'offer_id': '5a8bc65990b245e5a138643cd4eb9837'}   714   \n",
       " 148801   {'offer_id': '3f207df678b143eea3cee63160fa8bed'}   714   \n",
       " 148802   {'offer_id': '0b1e1539f2cc45b7b9fa7c272da2e1d7'}   714   \n",
       " 148803  {'offer_id': 'fafdcd668e3743c1bb461111dcafc2a4...   714   \n",
       " 148804  {'offer_id': 'fafdcd668e3743c1bb461111dcafc2a4...   714   \n",
       " \n",
       "                                 offer_id  reward  \n",
       " 0       9b98b8c7a33c4b65b9aebfe6a799e6d9     NaN  \n",
       " 1       2906b810c7d4411798c6938adc9daaa5     NaN  \n",
       " 2       f19421c1d4aa40978ebb69ca19b0e20d     NaN  \n",
       " 3       3f207df678b143eea3cee63160fa8bed     NaN  \n",
       " 4       0b1e1539f2cc45b7b9fa7c272da2e1d7     NaN  \n",
       " ...                                  ...     ...  \n",
       " 148800  5a8bc65990b245e5a138643cd4eb9837     NaN  \n",
       " 148801  3f207df678b143eea3cee63160fa8bed     NaN  \n",
       " 148802  0b1e1539f2cc45b7b9fa7c272da2e1d7     NaN  \n",
       " 148803  fafdcd668e3743c1bb461111dcafc2a4     2.0  \n",
       " 148804  fafdcd668e3743c1bb461111dcafc2a4     2.0  \n",
       " \n",
       " [148805 rows x 6 columns],\n",
       "                              customer_id        event  \\\n",
       " 0       02c083884c7d45b39cc68e1314fec56c  transaction   \n",
       " 1       9fa9ae8f57894cc9a3b8a9bbe0fc1b2f  transaction   \n",
       " 2       54890f68699049c2a04d415abc25e717  transaction   \n",
       " 3       b2f1cd155b864803ad8334cdf13c4bd2  transaction   \n",
       " 4       fe97aa22dd3e48c8b143116a8403dd52  transaction   \n",
       " ...                                  ...          ...   \n",
       " 123952  24f56b5e1849462093931b164eb803b5  transaction   \n",
       " 123953  b3a1272bc9904337b331bf348c3e8c17  transaction   \n",
       " 123954  68213b08d99a4ae1b0dcb72aebd9aa35  transaction   \n",
       " 123955  a00058cf10334a308c68e7631c529907  transaction   \n",
       " 123956  76ddbd6576844afe811f1a3c0fbb5bec  transaction   \n",
       " \n",
       "                                  value  time  amount  \n",
       " 0       {'amount': 0.8300000000000001}     0    0.83  \n",
       " 1                    {'amount': 34.56}     0   34.56  \n",
       " 2                    {'amount': 13.23}     0   13.23  \n",
       " 3                    {'amount': 19.51}     0   19.51  \n",
       " 4                    {'amount': 18.97}     0   18.97  \n",
       " ...                                ...   ...     ...  \n",
       " 123952               {'amount': 22.64}   714   22.64  \n",
       " 123953  {'amount': 1.5899999999999999}   714    1.59  \n",
       " 123954                {'amount': 9.53}   714    9.53  \n",
       " 123955                {'amount': 3.61}   714    3.61  \n",
       " 123956  {'amount': 3.5300000000000002}   714    3.53  \n",
       " \n",
       " [123957 rows x 5 columns])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#viewing the created datasets\n",
    "offers_df, transaction_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>offer_id</th>\n",
       "      <th>time</th>\n",
       "      <th>offer received</th>\n",
       "      <th>offer viewed</th>\n",
       "      <th>offer completed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78afa995795e4d85b5d9ceeca43f5fef</td>\n",
       "      <td>9b98b8c7a33c4b65b9aebfe6a799e6d9</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>e2127556f4f64592b11af22de27a7932</td>\n",
       "      <td>2906b810c7d4411798c6938adc9daaa5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>389bc3fa690240e798340f5a15918d5c</td>\n",
       "      <td>f19421c1d4aa40978ebb69ca19b0e20d</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2eeac8d8feae4a8cad5a6af0499a211d</td>\n",
       "      <td>3f207df678b143eea3cee63160fa8bed</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>aa4862eba776480b8bb9c68455b8c2e1</td>\n",
       "      <td>0b1e1539f2cc45b7b9fa7c272da2e1d7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148800</th>\n",
       "      <td>84fb57a7fe8045a8bf6236738ee73a0f</td>\n",
       "      <td>5a8bc65990b245e5a138643cd4eb9837</td>\n",
       "      <td>714</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148801</th>\n",
       "      <td>abc4359eb34e4e2ca2349da2ddf771b6</td>\n",
       "      <td>3f207df678b143eea3cee63160fa8bed</td>\n",
       "      <td>714</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148802</th>\n",
       "      <td>8dda575c2a1d44b9ac8e8b07b93d1f8e</td>\n",
       "      <td>0b1e1539f2cc45b7b9fa7c272da2e1d7</td>\n",
       "      <td>714</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148803</th>\n",
       "      <td>8431c16f8e1d440880db371a68f82dd0</td>\n",
       "      <td>fafdcd668e3743c1bb461111dcafc2a4</td>\n",
       "      <td>714</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148804</th>\n",
       "      <td>24f56b5e1849462093931b164eb803b5</td>\n",
       "      <td>fafdcd668e3743c1bb461111dcafc2a4</td>\n",
       "      <td>714</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>148805 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             customer_id                          offer_id  \\\n",
       "0       78afa995795e4d85b5d9ceeca43f5fef  9b98b8c7a33c4b65b9aebfe6a799e6d9   \n",
       "1       e2127556f4f64592b11af22de27a7932  2906b810c7d4411798c6938adc9daaa5   \n",
       "2       389bc3fa690240e798340f5a15918d5c  f19421c1d4aa40978ebb69ca19b0e20d   \n",
       "3       2eeac8d8feae4a8cad5a6af0499a211d  3f207df678b143eea3cee63160fa8bed   \n",
       "4       aa4862eba776480b8bb9c68455b8c2e1  0b1e1539f2cc45b7b9fa7c272da2e1d7   \n",
       "...                                  ...                               ...   \n",
       "148800  84fb57a7fe8045a8bf6236738ee73a0f  5a8bc65990b245e5a138643cd4eb9837   \n",
       "148801  abc4359eb34e4e2ca2349da2ddf771b6  3f207df678b143eea3cee63160fa8bed   \n",
       "148802  8dda575c2a1d44b9ac8e8b07b93d1f8e  0b1e1539f2cc45b7b9fa7c272da2e1d7   \n",
       "148803  8431c16f8e1d440880db371a68f82dd0  fafdcd668e3743c1bb461111dcafc2a4   \n",
       "148804  24f56b5e1849462093931b164eb803b5  fafdcd668e3743c1bb461111dcafc2a4   \n",
       "\n",
       "        time  offer received  offer viewed  offer completed  \n",
       "0          0               1             0                0  \n",
       "1          0               1             0                0  \n",
       "2          0               1             0                0  \n",
       "3          0               1             0                0  \n",
       "4          0               1             0                0  \n",
       "...      ...             ...           ...              ...  \n",
       "148800   714               0             1                0  \n",
       "148801   714               0             1                0  \n",
       "148802   714               0             1                0  \n",
       "148803   714               0             0                1  \n",
       "148804   714               0             0                1  \n",
       "\n",
       "[148805 rows x 6 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#we will now drop the value column from the two datasets created. This will be achieved with a function drop_col\n",
    "#We will also get the dummies of the 'events' column\n",
    "\n",
    "def drop_col (df, column):\n",
    "    \"\"\"\n",
    "    This function will drop the specified column\n",
    "    ARGS:\n",
    "        df - dataset\n",
    "        column - column to be dropped\n",
    "    \"\"\"\n",
    "    df.drop(column, axis = 1, inplace = True)\n",
    "    return df\n",
    "\n",
    "#Calling the drop_col function on the datasets created\n",
    "drop_col(offers_df, 'value')\n",
    "drop_col(transaction_df, 'value')\n",
    "\n",
    "#Getting dummies for the event column in the offer dataset\n",
    "offers_df = pd.get_dummies(offers_df, columns = ['event'], prefix = '', prefix_sep = '')\n",
    "offers_df\n",
    "\n",
    "#We are now going to reorder the columns in the offers_df dataset\n",
    "col_order = ['customer_id', 'offer_id', 'time', 'offer received', 'offer viewed', 'offer completed']\n",
    "offers_df = offers_df.reindex(col_order, axis=1)\n",
    "offers_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>event</th>\n",
       "      <th>time</th>\n",
       "      <th>amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>02c083884c7d45b39cc68e1314fec56c</td>\n",
       "      <td>transaction</td>\n",
       "      <td>0</td>\n",
       "      <td>0.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9fa9ae8f57894cc9a3b8a9bbe0fc1b2f</td>\n",
       "      <td>transaction</td>\n",
       "      <td>0</td>\n",
       "      <td>34.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>54890f68699049c2a04d415abc25e717</td>\n",
       "      <td>transaction</td>\n",
       "      <td>0</td>\n",
       "      <td>13.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>b2f1cd155b864803ad8334cdf13c4bd2</td>\n",
       "      <td>transaction</td>\n",
       "      <td>0</td>\n",
       "      <td>19.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>fe97aa22dd3e48c8b143116a8403dd52</td>\n",
       "      <td>transaction</td>\n",
       "      <td>0</td>\n",
       "      <td>18.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123952</th>\n",
       "      <td>24f56b5e1849462093931b164eb803b5</td>\n",
       "      <td>transaction</td>\n",
       "      <td>714</td>\n",
       "      <td>22.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123953</th>\n",
       "      <td>b3a1272bc9904337b331bf348c3e8c17</td>\n",
       "      <td>transaction</td>\n",
       "      <td>714</td>\n",
       "      <td>1.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123954</th>\n",
       "      <td>68213b08d99a4ae1b0dcb72aebd9aa35</td>\n",
       "      <td>transaction</td>\n",
       "      <td>714</td>\n",
       "      <td>9.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123955</th>\n",
       "      <td>a00058cf10334a308c68e7631c529907</td>\n",
       "      <td>transaction</td>\n",
       "      <td>714</td>\n",
       "      <td>3.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123956</th>\n",
       "      <td>76ddbd6576844afe811f1a3c0fbb5bec</td>\n",
       "      <td>transaction</td>\n",
       "      <td>714</td>\n",
       "      <td>3.53</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>123957 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             customer_id        event  time  amount\n",
       "0       02c083884c7d45b39cc68e1314fec56c  transaction     0    0.83\n",
       "1       9fa9ae8f57894cc9a3b8a9bbe0fc1b2f  transaction     0   34.56\n",
       "2       54890f68699049c2a04d415abc25e717  transaction     0   13.23\n",
       "3       b2f1cd155b864803ad8334cdf13c4bd2  transaction     0   19.51\n",
       "4       fe97aa22dd3e48c8b143116a8403dd52  transaction     0   18.97\n",
       "...                                  ...          ...   ...     ...\n",
       "123952  24f56b5e1849462093931b164eb803b5  transaction   714   22.64\n",
       "123953  b3a1272bc9904337b331bf348c3e8c17  transaction   714    1.59\n",
       "123954  68213b08d99a4ae1b0dcb72aebd9aa35  transaction   714    9.53\n",
       "123955  a00058cf10334a308c68e7631c529907  transaction   714    3.61\n",
       "123956  76ddbd6576844afe811f1a3c0fbb5bec  transaction   714    3.53\n",
       "\n",
       "[123957 rows x 4 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking the transaction_df dataset to see if everything is as we want it \n",
    "transaction_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>offer_id</th>\n",
       "      <th>time</th>\n",
       "      <th>reward</th>\n",
       "      <th>difficulty</th>\n",
       "      <th>bogo</th>\n",
       "      <th>discount</th>\n",
       "      <th>informational</th>\n",
       "      <th>web</th>\n",
       "      <th>email</th>\n",
       "      <th>...</th>\n",
       "      <th>month_8</th>\n",
       "      <th>month_9</th>\n",
       "      <th>month_10</th>\n",
       "      <th>month_11</th>\n",
       "      <th>month_12</th>\n",
       "      <th>gender_F</th>\n",
       "      <th>gender_M</th>\n",
       "      <th>gender_O</th>\n",
       "      <th>total_amount</th>\n",
       "      <th>cust_response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78afa995795e4d85b5d9ceeca43f5fef</td>\n",
       "      <td>9b98b8c7a33c4b65b9aebfe6a799e6d9</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>37.67</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>78afa995795e4d85b5d9ceeca43f5fef</td>\n",
       "      <td>5a8bc65990b245e5a138643cd4eb9837</td>\n",
       "      <td>168</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>49.39</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>78afa995795e4d85b5d9ceeca43f5fef</td>\n",
       "      <td>ae264e3637204a6fb9bb56bc8210ddfd</td>\n",
       "      <td>408</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>48.28</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>78afa995795e4d85b5d9ceeca43f5fef</td>\n",
       "      <td>f19421c1d4aa40978ebb69ca19b0e20d</td>\n",
       "      <td>504</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>48.28</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>e2127556f4f64592b11af22de27a7932</td>\n",
       "      <td>2906b810c7d4411798c6938adc9daaa5</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66496</th>\n",
       "      <td>3cc622f76e464bc1809a71e871579d6c</td>\n",
       "      <td>2906b810c7d4411798c6938adc9daaa5</td>\n",
       "      <td>576</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>34.04</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66497</th>\n",
       "      <td>01fe5ec668f241608eb2f7ec374cb1b7</td>\n",
       "      <td>5a8bc65990b245e5a138643cd4eb9837</td>\n",
       "      <td>576</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>19.92</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66498</th>\n",
       "      <td>d825b707198046e39baa4fdcfa11d621</td>\n",
       "      <td>9b98b8c7a33c4b65b9aebfe6a799e6d9</td>\n",
       "      <td>576</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>28.42</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66499</th>\n",
       "      <td>c207a8a8ef5c47ee970ca45f859e07eb</td>\n",
       "      <td>2298d6c36e964ae4a3e7e9706d1fb8c2</td>\n",
       "      <td>576</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>75.84</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66500</th>\n",
       "      <td>9a3f45cf29ef428b932492c7a5d6ac52</td>\n",
       "      <td>2298d6c36e964ae4a3e7e9706d1fb8c2</td>\n",
       "      <td>576</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14.25</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>66501 rows Ã— 58 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            customer_id                          offer_id  \\\n",
       "0      78afa995795e4d85b5d9ceeca43f5fef  9b98b8c7a33c4b65b9aebfe6a799e6d9   \n",
       "1      78afa995795e4d85b5d9ceeca43f5fef  5a8bc65990b245e5a138643cd4eb9837   \n",
       "2      78afa995795e4d85b5d9ceeca43f5fef  ae264e3637204a6fb9bb56bc8210ddfd   \n",
       "3      78afa995795e4d85b5d9ceeca43f5fef  f19421c1d4aa40978ebb69ca19b0e20d   \n",
       "4      e2127556f4f64592b11af22de27a7932  2906b810c7d4411798c6938adc9daaa5   \n",
       "...                                 ...                               ...   \n",
       "66496  3cc622f76e464bc1809a71e871579d6c  2906b810c7d4411798c6938adc9daaa5   \n",
       "66497  01fe5ec668f241608eb2f7ec374cb1b7  5a8bc65990b245e5a138643cd4eb9837   \n",
       "66498  d825b707198046e39baa4fdcfa11d621  9b98b8c7a33c4b65b9aebfe6a799e6d9   \n",
       "66499  c207a8a8ef5c47ee970ca45f859e07eb  2298d6c36e964ae4a3e7e9706d1fb8c2   \n",
       "66500  9a3f45cf29ef428b932492c7a5d6ac52  2298d6c36e964ae4a3e7e9706d1fb8c2   \n",
       "\n",
       "       time  reward  difficulty  bogo  discount  informational  web  email  \\\n",
       "0         0       5           5     1         0              0    1      1   \n",
       "1       168       0           0     0         0              1    0      1   \n",
       "2       408      10          10     1         0              0    0      1   \n",
       "3       504       5           5     1         0              0    1      1   \n",
       "4         0       2          10     0         1              0    1      1   \n",
       "...     ...     ...         ...   ...       ...            ...  ...    ...   \n",
       "66496   576       2          10     0         1              0    1      1   \n",
       "66497   576       0           0     0         0              1    0      1   \n",
       "66498   576       5           5     1         0              0    1      1   \n",
       "66499   576       3           7     0         1              0    1      1   \n",
       "66500   576       3           7     0         1              0    1      1   \n",
       "\n",
       "       ...  month_8  month_9  month_10  month_11  month_12  gender_F  \\\n",
       "0      ...        0        0         0         0         0         1   \n",
       "1      ...        0        0         0         0         0         1   \n",
       "2      ...        0        0         0         0         0         1   \n",
       "3      ...        0        0         0         0         0         1   \n",
       "4      ...        0        0         0         0         0         0   \n",
       "...    ...      ...      ...       ...       ...       ...       ...   \n",
       "66496  ...        1        0         0         0         0         0   \n",
       "66497  ...        1        0         0         0         0         0   \n",
       "66498  ...        0        0         0         0         0         0   \n",
       "66499  ...        0        0         0         0         1         1   \n",
       "66500  ...        0        0         1         0         0         0   \n",
       "\n",
       "       gender_M  gender_O  total_amount  cust_response  \n",
       "0             0         0         37.67              1  \n",
       "1             0         0         49.39              1  \n",
       "2             0         0         48.28              1  \n",
       "3             0         0         48.28              1  \n",
       "4             1         0          0.00              0  \n",
       "...         ...       ...           ...            ...  \n",
       "66496         1         0         34.04              0  \n",
       "66497         1         0         19.92              1  \n",
       "66498         1         0         28.42              0  \n",
       "66499         0         0         75.84              1  \n",
       "66500         1         0         14.25              1  \n",
       "\n",
       "[66501 rows x 58 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def create_combined_data(portfolio, profile, offers_df, transaction_df):\n",
    "    \n",
    "    \n",
    "    \"\"\"\n",
    "    Create a combined dataframe from the transaction, demographic and offer data:\n",
    "    ARGS:\n",
    "        portfolio - (dataframe),offer metadata\n",
    "        profile - (dataframe),customer demographic data\n",
    "        offers_df - (dataframe), offers data for customers\n",
    "        transaction_df - (dataframe), transaction data for customers\n",
    "    \"\"\"\n",
    "    \n",
    "    combined_data = [] # Initialize empty list for combined data\n",
    "    customer_id_list = offers_df['customer_id'].unique().tolist() # List of unique customers in offers_df\n",
    "        \n",
    "\n",
    "    # Iterate over each customer\n",
    "    for i, cust_id in enumerate(customer_id_list):\n",
    "            \n",
    "        # select customer profile from profile data\n",
    "        cust_profile = clean_profile[clean_profile['customer_id'] == cust_id] \n",
    "        \n",
    "        # select offers associated with the customer from offers_df\n",
    "        cust_offers_data = offers_df[offers_df['customer_id'] == cust_id]\n",
    "        \n",
    "        # select transactions associated with the customer from transactions_df\n",
    "        cust_transaction_df = transaction_df[transaction_df['customer_id'] == cust_id]\n",
    "        \n",
    "        # select received, completed, viewed offer data from customer offers\n",
    "        offer_received_data  = cust_offers_data[cust_offers_data['offer received'] == 1]\n",
    "        offer_viewed_data = cust_offers_data[cust_offers_data['offer viewed'] == 1]\n",
    "        offer_completed_data = cust_offers_data[cust_offers_data['offer completed'] == 1]\n",
    "            \n",
    "        # Iterate over each offer received by a customer\n",
    "        rows = [] # Initialize empty list for a customer records\n",
    "            \n",
    "        for off_id in offer_received_data['offer_id'].values.tolist():\n",
    "            \n",
    "            # select duration of a particular offer_id\n",
    "            duration = clean_portfolio.loc[clean_portfolio['offer_id'] == off_id, 'duration_by_hours'].values[0]\n",
    "            \n",
    "            # select the time when offer was received\n",
    "            off_recd_time = offer_received_data.loc[offer_received_data['offer_id'] == off_id, 'time'].values[0]\n",
    "            \n",
    "            # Calculate the time when the offer ends\n",
    "            off_end_time = off_recd_time + duration\n",
    "            \n",
    "            #Initialize a boolean array that determines if the customer viewed an offer between offer period\n",
    "            offers_viewed = np.logical_and(offer_viewed_data['time'] >= off_recd_time,offer_viewed_data['time'] <= off_end_time)\n",
    "                \n",
    "            # Check if the offer type is 'bogo' or 'discount'\n",
    "            if (clean_portfolio[clean_portfolio['offer_id'] == off_id]['bogo'].values[0] == 1 or\\\n",
    "                    clean_portfolio[clean_portfolio['offer_id'] == off_id]['discount'].values[0] == 1):\n",
    "                \n",
    "                #Initialize a boolean array that determines if the customer completed an offer between offer period\n",
    "                offers_comp = np.logical_and(offer_completed_data ['time'] >= off_recd_time,\\\n",
    "                                                 offer_completed_data ['time'] <= off_end_time)\n",
    "                    \n",
    "                #Initialize a boolean array that selects customer transctions between offer period\n",
    "                cust_tran_within_period = cust_transaction_df[np.logical_and(cust_transaction_df['time'] >= off_recd_time,\\\n",
    "                                                                                 cust_transaction_df['time'] <= off_end_time)]\n",
    "                    \n",
    "                # Determine if the customer responded to an offer(bogo or discount) or not\n",
    "                cust_response = np.logical_and(offers_viewed.sum() > 0, offers_comp.sum() > 0) and\\\n",
    "                                                    (cust_tran_within_period['amount'].sum() >=\\\n",
    "                                                     clean_portfolio[clean_portfolio['offer_id'] == off_id]['difficulty'].values[0])\n",
    "                \n",
    "            # Check if the offer type is 'informational'\n",
    "            elif clean_portfolio[clean_portfolio['offer_id'] == off_id]['informational'].values[0] == 1:\n",
    "                \n",
    "                #Initialize a boolean array that determines if the customer made any transctions between offer period\n",
    "                cust_info_tran = np.logical_and(cust_transaction_df['time'] >= off_recd_time,\\\n",
    "                                                    cust_transaction_df['time'] <= off_end_time)                   \n",
    "                    \n",
    "                # Determine if the customer responded to an offer(informational) or not\n",
    "                cust_response = offers_viewed.sum() > 0 and cust_info_tran.sum() > 0                  \n",
    "                \n",
    "                #Initialize a boolean array that selects customer transctions between offer period\n",
    "                cust_tran_within_period = cust_transaction_df[np.logical_and(cust_transaction_df['time'] >= off_recd_time,\\\n",
    "                                                                                 cust_transaction_df['time'] <= off_end_time)]\n",
    "                \n",
    "            # Initialize a dictionary for a customer with required information for a particular offer\n",
    "            cust_rec = {'cust_response': int(cust_response),'time': off_recd_time,'total_amount': cust_tran_within_period['amount'].sum()}\n",
    "            cust_rec.update(clean_profile[clean_profile['customer_id'] == cust_id].squeeze().to_dict())\n",
    "            cust_rec.update(clean_portfolio[clean_portfolio['offer_id'] == off_id].squeeze().to_dict())\n",
    "                \n",
    "            # Add the dictionary to list for combined_data\n",
    "            rows.append(cust_rec)\n",
    "            \n",
    "        # Add the dictionaries from rows list to combined_data list\n",
    "        combined_data.extend(rows)\n",
    "            \n",
    "        \n",
    "    # Convert combined_data list to dataframe\n",
    "    combined_data_df = pd.DataFrame(combined_data)\n",
    "        \n",
    "    # Reorder columns of combined_data_df\n",
    "    combined_data_df_col_order = ['customer_id', 'offer_id', 'time']\n",
    "\n",
    "    port_ls = clean_portfolio.columns.tolist()\n",
    "    port_ls.remove('offer_id')\n",
    "    pro_ls = clean_profile.columns.tolist()\n",
    "    pro_ls.remove('customer_id')\n",
    "    combined_data_df_col_order.extend(port_ls)\n",
    "    combined_data_df_col_order.extend(pro_ls)\n",
    "    combined_data_df_col_order.extend(['total_amount', 'cust_response'])\n",
    "        \n",
    "    combined_data_df = combined_data_df.reindex(combined_data_df_col_order, axis=1)\n",
    "    combined_data_df.to_csv('combined_data2.csv', index=False)\n",
    "    return combined_data_df\n",
    "\n",
    "combined_df = create_combined_data(portfolio, profile, offers_df, transaction_df)\n",
    "combined_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>offer_id</th>\n",
       "      <th>count</th>\n",
       "      <th>success_percentage</th>\n",
       "      <th>offer_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>fafdcd668e3743c1bb461111dcafc2a4</td>\n",
       "      <td>6652</td>\n",
       "      <td>75.20</td>\n",
       "      <td>discount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2298d6c36e964ae4a3e7e9706d1fb8c2</td>\n",
       "      <td>6655</td>\n",
       "      <td>72.28</td>\n",
       "      <td>discount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>f19421c1d4aa40978ebb69ca19b0e20d</td>\n",
       "      <td>6576</td>\n",
       "      <td>60.74</td>\n",
       "      <td>bogo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5a8bc65990b245e5a138643cd4eb9837</td>\n",
       "      <td>6643</td>\n",
       "      <td>54.72</td>\n",
       "      <td>informational</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ae264e3637204a6fb9bb56bc8210ddfd</td>\n",
       "      <td>6683</td>\n",
       "      <td>53.25</td>\n",
       "      <td>bogo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4d5c57ea9a6940dd891ad53e9dbe8da0</td>\n",
       "      <td>6593</td>\n",
       "      <td>49.98</td>\n",
       "      <td>bogo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2906b810c7d4411798c6938adc9daaa5</td>\n",
       "      <td>6631</td>\n",
       "      <td>47.29</td>\n",
       "      <td>discount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>9b98b8c7a33c4b65b9aebfe6a799e6d9</td>\n",
       "      <td>6685</td>\n",
       "      <td>47.28</td>\n",
       "      <td>bogo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0b1e1539f2cc45b7b9fa7c272da2e1d7</td>\n",
       "      <td>6726</td>\n",
       "      <td>41.85</td>\n",
       "      <td>discount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3f207df678b143eea3cee63160fa8bed</td>\n",
       "      <td>6657</td>\n",
       "      <td>36.76</td>\n",
       "      <td>informational</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           offer_id  count  success_percentage     offer_type\n",
       "9  fafdcd668e3743c1bb461111dcafc2a4   6652               75.20       discount\n",
       "1  2298d6c36e964ae4a3e7e9706d1fb8c2   6655               72.28       discount\n",
       "8  f19421c1d4aa40978ebb69ca19b0e20d   6576               60.74           bogo\n",
       "5  5a8bc65990b245e5a138643cd4eb9837   6643               54.72  informational\n",
       "7  ae264e3637204a6fb9bb56bc8210ddfd   6683               53.25           bogo\n",
       "4  4d5c57ea9a6940dd891ad53e9dbe8da0   6593               49.98           bogo\n",
       "2  2906b810c7d4411798c6938adc9daaa5   6631               47.29       discount\n",
       "6  9b98b8c7a33c4b65b9aebfe6a799e6d9   6685               47.28           bogo\n",
       "0  0b1e1539f2cc45b7b9fa7c272da2e1d7   6726               41.85       discount\n",
       "3  3f207df678b143eea3cee63160fa8bed   6657               36.76  informational"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We have successfully joined the four datasets in this project as seen above.\n",
    "#The next step will be to create a new dataset that will show the percentage of offer_responses that were successful\n",
    "\n",
    "#After this, we will plot the number of offers recieved by customers and the success rate of each offer\n",
    "\n",
    "#Function to create the dataset\n",
    "def calculate_success_percentage():\n",
    "    \n",
    "    '''This function will create dataframe offer_success with features offer_id, success_percentage and offer_type\n",
    "\n",
    "    OUTPUT:\n",
    "        offer_response - (dataframe), with the features offer_id, success_pourcentage and offer_type\n",
    "    '''\n",
    "    \n",
    "    # \n",
    "    offer_response = combined_df.groupby(['offer_id'])['cust_response'].count().reset_index()\n",
    "    offer_response.rename(columns={'cust_response': 'count'}, inplace=True)\n",
    "    success_percentage = combined_df.groupby(['offer_id'])['cust_response'].sum()/\\\n",
    "                combined_df.groupby(['offer_id'])['cust_response'].count()\n",
    "    np.round(success_percentage.values*100,2)\n",
    "    offer_response['success_percentage'] = np.round(success_percentage.values*100,2)                                  \n",
    "    offer_response['offer_type'] = offer_response['offer_id'].map({'ae264e3637204a6fb9bb56bc8210ddfd': 'bogo',\\\n",
    "                                                               '4d5c57ea9a6940dd891ad53e9dbe8da0': 'bogo',\\\n",
    "                                                               '3f207df678b143eea3cee63160fa8bed': 'informational',\\\n",
    "                                                               '9b98b8c7a33c4b65b9aebfe6a799e6d9': 'bogo',\\\n",
    "                                                               '0b1e1539f2cc45b7b9fa7c272da2e1d7': 'discount',\\\n",
    "                                                               '2298d6c36e964ae4a3e7e9706d1fb8c2': 'discount',\\\n",
    "                                                               'fafdcd668e3743c1bb461111dcafc2a4': 'discount',\\\n",
    "                                                               '5a8bc65990b245e5a138643cd4eb9837': 'informational',\\\n",
    "                                                               'f19421c1d4aa40978ebb69ca19b0e20d': 'bogo',\\\n",
    "                                                               '2906b810c7d4411798c6938adc9daaa5': 'discount'})\n",
    "\n",
    "    offer_response=offer_response.sort_values(by=['success_percentage'], ascending=False)\n",
    "    return offer_response\n",
    "\n",
    "\n",
    "#calling the function to create a new dataset\n",
    "offers_response_df = calculate_success_percentage()\n",
    "offers_response_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plotting the number of each offer recieved by customers and the success rate of each offer. \n",
    "#This will be achieved by creating a offer_success_plotter function\n",
    "\n",
    "def offer_success_plotter (df, column, title):\n",
    "    \"\"\"\n",
    "    This function will seperate the dict values in the transaction_df\n",
    "    ARGS:\n",
    "        df - dataset\n",
    "        column - column to be seperated\n",
    "        title - title of the graph plotted\n",
    "    \"\"\"\n",
    "    x = df.index\n",
    "    y = df[column]\n",
    "    \n",
    "    fig=plt.figure(figsize = (10,6)) #size of bar_chart\n",
    "    plt.bar(x, y, color = 'lightseagreen')\n",
    "    plt.xticks(np.arange(0, len(x), 1)) #Ensuring each index is shown in the chart\n",
    "    plt.xlabel('Offer Number')\n",
    "    plt.ylabel(column)\n",
    "    plt.title(title)\n",
    "    plt.show()\n",
    "\n",
    "#calling the offer_success_plotter() function to plot the graphs \n",
    "offer_success_plotter (offers_response_df, 'count', 'Amount of each offer recieved by customers')\n",
    "\n",
    "offer_success_plotter (offers_response_df, 'success_percentage', 'Percentage of offers responded to')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['customer_id',\n",
       " 'offer_id',\n",
       " 'time',\n",
       " 'reward',\n",
       " 'difficulty',\n",
       " 'bogo',\n",
       " 'discount',\n",
       " 'informational',\n",
       " 'web',\n",
       " 'email',\n",
       " 'mobile',\n",
       " 'social',\n",
       " 'duration_by_hours',\n",
       " 'became_member_day',\n",
       " 'membership_tenure',\n",
       " 'age_grade_10s',\n",
       " 'age_grade_20s',\n",
       " 'age_grade_30s',\n",
       " 'age_grade_40s',\n",
       " 'age_grade_50s',\n",
       " 'age_grade_60s',\n",
       " 'age_grade_70s',\n",
       " 'age_grade_80s',\n",
       " 'age_grade_90s',\n",
       " 'age_grade_100s',\n",
       " 'income_range_30ths',\n",
       " 'income_range_40ths',\n",
       " 'income_range_50ths',\n",
       " 'income_range_60ths',\n",
       " 'income_range_70ths',\n",
       " 'income_range_80ths',\n",
       " 'income_range_90ths',\n",
       " 'income_range_100ths',\n",
       " 'income_range_110ths',\n",
       " 'income_range_120ths',\n",
       " 'year_2013',\n",
       " 'year_2014',\n",
       " 'year_2015',\n",
       " 'year_2016',\n",
       " 'year_2017',\n",
       " 'year_2018',\n",
       " 'month_1',\n",
       " 'month_2',\n",
       " 'month_3',\n",
       " 'month_4',\n",
       " 'month_5',\n",
       " 'month_6',\n",
       " 'month_7',\n",
       " 'month_8',\n",
       " 'month_9',\n",
       " 'month_10',\n",
       " 'month_11',\n",
       " 'month_12',\n",
       " 'gender_F',\n",
       " 'gender_M',\n",
       " 'gender_O',\n",
       " 'total_amount',\n",
       " 'cust_response']"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_df.columns.tolist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Splitting into Training and Testing Sets and Modelling\n",
    "\n",
    "In this section, we will split the dataset into training and testing sets, normalize with MinMaxScaler() as initialized with scaler and then fit into our models. \n",
    "\n",
    "### 2.1 Benchmark Model\n",
    "\n",
    "Benchmarking is the process of comparing models in their ability to learn patterns from a dataset. Flowing from this definition, 3 distinct classifiers (Logistic Regression, Random Forest Classifier, Gradient Boosting) will be trained with the data and their results compared with each other. The classifier or model with the highest accuracy will be chosen. \n",
    "\n",
    "Recall that we had imported the following models and initalized them as such:\n",
    "<ol> <b>\n",
    "lr = LogisticRegression(random_state=42),  \n",
    "rfc = RandomForestClassifier(random_state=42), \n",
    "gbc = GradientBoostingClassifier(random_state=42) \n",
    "</ol> </b>\n",
    "\n",
    "Each of these models will be trained with data from our combined_df \n",
    "\n",
    "### 2.2 Evaluation Metrics\n",
    "\n",
    "evaluation metrics refers to a tool that measures the performance of a model . For this project, a confusion matrix will be generated detailing the True Positives (TP), False Positives (FP), False Negatives (FN), True Negatives (TN). The purpose of this is to depict the number of correct and wrong predictions made by the model. After this, the modelâ€™s accuracy score will be generated. Accuracy measures the ratio of correct predictions over the total number of instances evaluated. Formula for accuracy: (TP+TN)/(TP+TN+FP+FN)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['reward',\n",
       " 'difficulty',\n",
       " 'bogo',\n",
       " 'discount',\n",
       " 'informational',\n",
       " 'web',\n",
       " 'mobile',\n",
       " 'social',\n",
       " 'duration_by_hours',\n",
       " 'membership_tenure',\n",
       " 'age_grade_10s',\n",
       " 'age_grade_20s',\n",
       " 'age_grade_30s',\n",
       " 'age_grade_40s',\n",
       " 'age_grade_50s',\n",
       " 'age_grade_60s',\n",
       " 'age_grade_70s',\n",
       " 'age_grade_80s',\n",
       " 'age_grade_90s',\n",
       " 'age_grade_100s',\n",
       " 'income_range_30ths',\n",
       " 'income_range_40ths',\n",
       " 'income_range_50ths',\n",
       " 'income_range_60ths',\n",
       " 'income_range_70ths',\n",
       " 'income_range_80ths',\n",
       " 'income_range_90ths',\n",
       " 'income_range_100ths',\n",
       " 'income_range_110ths',\n",
       " 'income_range_120ths',\n",
       " 'year_2013',\n",
       " 'year_2014',\n",
       " 'year_2015',\n",
       " 'year_2016',\n",
       " 'year_2017',\n",
       " 'year_2018',\n",
       " 'month_1',\n",
       " 'month_2',\n",
       " 'month_3',\n",
       " 'month_4',\n",
       " 'month_5',\n",
       " 'month_6',\n",
       " 'month_7',\n",
       " 'month_8',\n",
       " 'month_9',\n",
       " 'month_10',\n",
       " 'month_11',\n",
       " 'month_12',\n",
       " 'gender_F',\n",
       " 'gender_M',\n",
       " 'gender_O',\n",
       " 'total_amount',\n",
       " 'cust_response']"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Before spliting the dataset, we need to drop features from combined_data that are not required for training the model\n",
    "combined_df.drop(columns=['customer_id', 'offer_id', 'time', 'email', 'became_member_day'], inplace=True)\n",
    "\n",
    "#Let's see the columns after splitting\n",
    "combined_df.columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bogo</th>\n",
       "      <th>discount</th>\n",
       "      <th>informational</th>\n",
       "      <th>web</th>\n",
       "      <th>mobile</th>\n",
       "      <th>social</th>\n",
       "      <th>age_grade_10s</th>\n",
       "      <th>age_grade_20s</th>\n",
       "      <th>age_grade_30s</th>\n",
       "      <th>age_grade_40s</th>\n",
       "      <th>...</th>\n",
       "      <th>month_12</th>\n",
       "      <th>gender_F</th>\n",
       "      <th>gender_M</th>\n",
       "      <th>gender_O</th>\n",
       "      <th>cust_response</th>\n",
       "      <th>difficulty</th>\n",
       "      <th>duration_by_hours</th>\n",
       "      <th>reward</th>\n",
       "      <th>membership_tenure</th>\n",
       "      <th>total_amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.243006</td>\n",
       "      <td>0.033137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.243006</td>\n",
       "      <td>0.043447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.243006</td>\n",
       "      <td>0.042471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.243006</td>\n",
       "      <td>0.042471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.049918</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66496</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.186506</td>\n",
       "      <td>0.029944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66497</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.196380</td>\n",
       "      <td>0.017523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66498</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.051563</td>\n",
       "      <td>0.025000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66499</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.35</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0.117937</td>\n",
       "      <td>0.066715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66500</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.35</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0.353812</td>\n",
       "      <td>0.012535</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>66501 rows Ã— 53 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       bogo  discount  informational  web  mobile  social  age_grade_10s  \\\n",
       "0         1         0              0    1       1       0              0   \n",
       "1         0         0              1    0       1       1              0   \n",
       "2         1         0              0    0       1       1              0   \n",
       "3         1         0              0    1       1       1              0   \n",
       "4         0         1              0    1       1       0              0   \n",
       "...     ...       ...            ...  ...     ...     ...            ...   \n",
       "66496     0         1              0    1       1       0              0   \n",
       "66497     0         0              1    0       1       1              0   \n",
       "66498     1         0              0    1       1       0              0   \n",
       "66499     0         1              0    1       1       1              0   \n",
       "66500     0         1              0    1       1       1              0   \n",
       "\n",
       "       age_grade_20s  age_grade_30s  age_grade_40s  ...  month_12  gender_F  \\\n",
       "0                  0              0              0  ...         0         1   \n",
       "1                  0              0              0  ...         0         1   \n",
       "2                  0              0              0  ...         0         1   \n",
       "3                  0              0              0  ...         0         1   \n",
       "4                  0              0              0  ...         0         0   \n",
       "...              ...            ...            ...  ...       ...       ...   \n",
       "66496              0              0              0  ...         0         0   \n",
       "66497              0              0              1  ...         0         0   \n",
       "66498              0              0              0  ...         0         0   \n",
       "66499              0              0              0  ...         1         1   \n",
       "66500              1              0              0  ...         0         0   \n",
       "\n",
       "       gender_M  gender_O  cust_response  difficulty  duration_by_hours  \\\n",
       "0             0         0              1        0.25           0.571429   \n",
       "1             0         0              1        0.00           0.000000   \n",
       "2             0         0              1        0.50           0.571429   \n",
       "3             0         0              1        0.25           0.285714   \n",
       "4             1         0              0        0.50           0.571429   \n",
       "...         ...       ...            ...         ...                ...   \n",
       "66496         1         0              0        0.50           0.571429   \n",
       "66497         1         0              1        0.00           0.000000   \n",
       "66498         1         0              0        0.25           0.571429   \n",
       "66499         0         0              1        0.35           0.571429   \n",
       "66500         1         0              1        0.35           0.571429   \n",
       "\n",
       "       reward  membership_tenure  total_amount  \n",
       "0         0.5           0.243006      0.033137  \n",
       "1         0.0           0.243006      0.043447  \n",
       "2         1.0           0.243006      0.042471  \n",
       "3         0.5           0.243006      0.042471  \n",
       "4         0.2           0.049918      0.000000  \n",
       "...       ...                ...           ...  \n",
       "66496     0.2           0.186506      0.029944  \n",
       "66497     0.0           0.196380      0.017523  \n",
       "66498     0.5           0.051563      0.025000  \n",
       "66499     0.3           0.117937      0.066715  \n",
       "66500     0.3           0.353812      0.012535  \n",
       "\n",
       "[66501 rows x 53 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Next, we are going to scale values in the  combined_df dataset. This will be done by a scale_features function\n",
    "\n",
    "#A list of the features we want to scale\n",
    "features_to_scale = ['difficulty', 'duration_by_hours', 'reward', 'membership_tenure', 'total_amount']\n",
    "\n",
    "def scale_features(df, feat=features_to_scale):\n",
    "    \n",
    "    \n",
    "    \"\"\"\n",
    "    This function will scale list features in a given dataframe\n",
    "    \n",
    "    ARGS:\n",
    "        df (dataframe): dataframe having features to scale\n",
    "        feat (list): list of features in dataframe to scale\n",
    "    \"\"\"\n",
    "        \n",
    "    # Prepare dataframe with features to scale\n",
    "    df_feat_scale = df[feat]\n",
    "        \n",
    "    # Apply feature scaling to df\n",
    "    df_feat_scale = pd.DataFrame(scaler.fit_transform(df_feat_scale), columns = df_feat_scale.columns,index=df_feat_scale.index)\n",
    "        \n",
    "    # Drop orignal features from df and add scaled features \n",
    "    df = df.drop(columns=feat, axis=1)\n",
    "    df_scaled = pd.concat([df, df_feat_scale], axis=1)\n",
    "        \n",
    "    return df_scaled\n",
    "\n",
    "#Applying the scale_features column to the dataset \n",
    "combined_df_scaled = scale_features(combined_df, feat=features_to_scale)\n",
    "\n",
    "combined_df_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# splitting the dataset\n",
    "\n",
    "# x are the independece variables that act as the input of the model\n",
    "X = combined_df_scaled.drop(columns=['cust_response'])\n",
    "\n",
    "# y is the variable to we are trying to predict predict \n",
    "y = combined_df_scaled['cust_response']\n",
    "\n",
    "# split data into train and test sets with train_test_split()\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    53.8\n",
       "0    46.2\n",
       "Name: cust_response, dtype: float64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Next we are going to calculate the distribution of target values in the y_train set (i.e 1s and 0s)\n",
    "#This will tell us if the training is balanced or imbalanced\n",
    "\n",
    "round((y_train.squeeze().value_counts()/y_train.squeeze().count())*100,2)\n",
    "\n",
    "#From the answer below, we can tell that the training set is almost balanced. It is not extremely imbalanced.\n",
    "#As such, no need to worry about dealing with class imbalance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mac/Desktop/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogisticRegression(random_state=42)\n",
      "Classifier_Score : 0.8416111707841031\n",
      "*****************************\n",
      "RandomForestClassifier(random_state=42)\n",
      "Classifier_Score : 0.9999355531686359\n",
      "*****************************\n",
      "GradientBoostingClassifier(random_state=42)\n",
      "Classifier_Score : 0.9114285714285715\n",
      "*****************************\n"
     ]
    }
   ],
   "source": [
    "#Next, we are going to train the three models we have outlined and choose any of them based on the model's score\n",
    "#This will be done by creating a function called classifier_trainer\n",
    "# The model with the highest score will be chosen to predict values based on the X_test\n",
    "#After this, a confusion matrix will be generated to ascertain the True Positives (TP), False Positives (FP), False Negatives (FN), True Negatives (TN).\n",
    "\n",
    "def classifier_trainer(X_train, y_train):\n",
    "    \"\"\"\n",
    "    This function trains the identified classifers with the X_train and y_train sets\n",
    "    ARGS:\n",
    "        X_train - Independent variables (Features) training set\n",
    "        y_train - Dependent variable (Target) training set\n",
    "        \"\"\"\n",
    "    classifiers = [lr, rfc, gbc]\n",
    "    for classifier in classifiers:\n",
    "        training = classifier.fit(X_train, y_train)\n",
    "        score = 'Classifier_Score : {}'.format(classifier.score(X_train, y_train))\n",
    "        line_breaker = '*****************************'\n",
    "        print(training)\n",
    "        print(score)\n",
    "        print(line_breaker)\n",
    " \n",
    "\n",
    "classifier_trainer(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The preceding represents the training scores of the identified models. The next step is to generate the test accuracy of the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogisticRegression\n",
      "Classifier_test_Score : 0.8434664929076237\n",
      "*****************************\n",
      "RandomForestClassifier\n",
      "Classifier_test_Score : 0.9252669039145908\n",
      "*****************************\n",
      "GradientBoostingClassifier\n",
      "Classifier_test_Score : 0.9099794496516466\n",
      "*****************************\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "def classifier_tester(X_test):\n",
    "    \"\"\"\n",
    "    This function tests the identified classifiers with the X_test set\n",
    "    ARGS:\n",
    "        X_test - Independent variables (Features) testing set\n",
    "        \"\"\"\n",
    "    classifiers = [lr, rfc, gbc]\n",
    "    for classifier in classifiers:\n",
    "        testing = classifier.predict(X_test)\n",
    "        score = 'Classifier_test_Score : {}'.format(classifier.score(X_test, y_test))\n",
    "        line_breaker = '*****************************'\n",
    "        print(classifier.__class__.__name__)\n",
    "        print(score)\n",
    "        print(line_breaker)\n",
    "        \n",
    "classifier_tester(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the training and testing scores above, we can conclude that the Random Forest Classifier out performs the other models with a training and testing accuracy of 0.999 and 0.925 respectively. As a result, we will move forward with the Random Forest Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 1, ..., 0, 0, 1])"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#making predictions with the RandomForestClassifier\n",
    "y_pred = rfc.predict(X_test)\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True positive =  8111\n",
      "False positive =  1028\n",
      "False negative =  463\n",
      "True negative =  10349\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#We will also plot the confusion matrix. \n",
    "#To make the plot easily understandable, we will also list out the TP, FP, FN, TN. this will be done by a print_confusion_matrix function\n",
    "from sklearn.metrics import plot_confusion_matrix\n",
    "plot_confusion_matrix(rfc, X_test, y_test, include_values = True)\n",
    "\n",
    "def print_confusion_matrix(y_test, y_pred):\n",
    "    \"\"\"\n",
    "    This function prints out the TP, FP, FN and TN\n",
    "    ARGS:\n",
    "        y_test - the true values of y\n",
    "        y_pred - the predicted values of y\n",
    "    \"\"\"\n",
    "    cm = confusion_matrix(y_test, y_pred)\n",
    "    print('True positive = ', cm[0][0])\n",
    "    print('False positive = ', cm[0][1])\n",
    "    print('False negative = ', cm[1][0])\n",
    "    print('True negative = ', cm[1][1])\n",
    "    \n",
    "print_confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "from the confusion matrix above, we see that the false positives and negatives are a bit high, although the model performed well. Hence, we will tune the RandomClassifierModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 1, ..., 0, 0, 1])"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = RandomForestClassifier(n_estimators=60,criterion='entropy',random_state=42)\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "#Predicting with the tuned model\n",
    "y_pred = clf.predict(X_test)\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True positive =  8111\n",
      "False positive =  1028\n",
      "False negative =  450\n",
      "True negative =  10362\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plotting the confusion matrix of the predictions as made by the tuned model\n",
    "plot_confusion_matrix(clf, X_test, y_test, include_values = True)\n",
    "\n",
    "print_confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Results\n",
    "\n",
    "This section presents the results of the project "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.1 Idenitifying the Most Influential Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "feature_imp = pd.DataFrame(rfc.feature_importances_,index=X_train.columns.tolist(),columns=['feat_imp']).reset_index()\n",
    "feature_imp.rename(columns={'index': 'feature'}, inplace=True)\n",
    "feature_imp['feat_imp_rate'] = np.round((feature_imp['feat_imp']/feature_imp['feat_imp'].sum())*100,2)\n",
    "feature_imp = feature_imp.sort_values(by=['feat_imp_rate'], ascending=False).reset_index(drop=True)\n",
    "feature_imp.drop(columns=['feat_imp'],inplace=True)\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(10, 10),nrows=1,ncols=1)\n",
    "sns.barplot(x=feature_imp.loc[0:10,'feat_imp_rate'], y=feature_imp.loc[0:10,'feature'], color='blue', data=feature_imp)\n",
    "plt.xlabel('Percentage')\n",
    "plt.ylabel('Feature')\n",
    "plt.title('Top 10 important features')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The graph above gives detail on the top ten most influence features which determine if a customer will complete an offer or not. However, for the purpose of brevity, the top four features will be discussed. \n",
    "\n",
    "<b>Total Amount:</b> The total amount of money spent by a customer will determine to a large extent, if they will respond to an offer or no\n",
    "\n",
    "<b>membership tenure:</b> The membership tenure of customers also determines if they will respond to an offer or not\n",
    "\n",
    "<b>social:</b> Social is one of the channels by which customers recieve offers. from the visualization above, customers who recieved offers through social channels are more likely to respond to offers\n",
    "\n",
    "<b>difficulty:</b> difficulty denotes the minimum amount required to be spent before an offer can be completed. The chart shows that difficulty influences a customers decision to respond to an offer or not\n",
    "\n",
    "\n",
    "\n",
    "### Conclusion\n",
    "\n",
    "The project was set out to determine if a particular customer will respond to an offer or not. Following Data Exploration and Cleaning, the project involved training three classifiers namely: Logistic Regression, Random Forest Classifier and Gradient Boosting Classifier. their scores were measured to determine the model that performs best. with a score of 99% or 0.99, the Random Forest Classifier was chosen and tuned with certain parameters. The predictions were measured with a confusion matrix, to identify the \"correct\" and \"wrong\" predictions. With \n",
    "<ol>\n",
    "    True positive of  <b>8111</b>,\n",
    "    False positive of  <b>1028</b>,\n",
    "    False negative of  <b>450</b>,\n",
    "    True negative of  <b>10362</b>\n",
    "</ol> it can be said that the model perfomred well. The project also went further to identify the most influential features in the dataset. These features include: total_amount, membership tenure, social and difficulty. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
